
F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a93c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800aac4  0800aac4  0001aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab24  0800ab24  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab24  0800ab24  0001ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab2c  0800ab2c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ab34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002050  200001f4  0800ad28  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002244  0800ad28  00022244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002730f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004da5  00000000  00000000  00047533  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e98  00000000  00000000  0004c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  0004e170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029af3  00000000  00000000  0004fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ccfb  00000000  00000000  000798c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e52c7  00000000  00000000  000965be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082bc  00000000  00000000  0017b900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f4 	.word	0x200001f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aaac 	.word	0x0800aaac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f8 	.word	0x200001f8
 80001c4:	0800aaac 	.word	0x0800aaac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 ffc4 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 faa8 	bl	8000a28 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d8:	f000 f898 	bl	800060c <MX_ADC1_Init>
  MX_FSMC_Init();
 80004dc:	f000 fb7e 	bl	8000bdc <MX_FSMC_Init>
  MX_I2C1_Init();
 80004e0:	f000 f912 	bl	8000708 <MX_I2C1_Init>
  MX_RTC_Init();
 80004e4:	f000 f93e 	bl	8000764 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 80004e8:	f000 f962 	bl	80007b0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80004ec:	f000 f990 	bl	8000810 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004f0:	f000 f9c4 	bl	800087c <MX_SPI2_Init>
  MX_TIM3_Init();
 80004f4:	f000 f9f8 	bl	80008e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 fa6c 	bl	80009d4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80004fc:	f008 f946 	bl	800878c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000500:	f009 fd0c 	bl	8009f1c <MX_USB_DEVICE_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x3c>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b098      	sub	sp, #96	; 0x60
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00a fa06 	bl	800a928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <SystemClock_Config+0xfc>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000542:	4a30      	ldr	r2, [pc, #192]	; (8000604 <SystemClock_Config+0xfc>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	6413      	str	r3, [r2, #64]	; 0x40
 800054a:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <SystemClock_Config+0xfc>)
 800054c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <SystemClock_Config+0x100>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a2a      	ldr	r2, [pc, #168]	; (8000608 <SystemClock_Config+0x100>)
 8000560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0x100>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000572:	2305      	movs	r3, #5
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058a:	2304      	movs	r3, #4
 800058c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058e:	23a8      	movs	r3, #168	; 0xa8
 8000590:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 ff9a 	bl	80034d8 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005aa:	f000 fb89 	bl	8000cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f9f3 	bl	80039b8 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005d8:	f000 fb72 	bl	8000cc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005dc:	2302      	movs	r3, #2
 80005de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fc08 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005f6:	f000 fb63 	bl	8000cc0 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3760      	adds	r7, #96	; 0x60
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800061e:	4b37      	ldr	r3, [pc, #220]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000620:	4a37      	ldr	r2, [pc, #220]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <MX_ADC1_Init+0xf0>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000632:	4b32      	ldr	r3, [pc, #200]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000634:	2201      	movs	r2, #1
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <MX_ADC1_Init+0xf0>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_ADC1_Init+0xf0>)
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <MX_ADC1_Init+0xf8>)
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <MX_ADC1_Init+0xf0>)
 800065a:	2204      	movs	r2, #4
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_ADC1_Init+0xf0>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4823      	ldr	r0, [pc, #140]	; (80006fc <MX_ADC1_Init+0xf0>)
 800066e:	f000 ff57 	bl	8001520 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fb22 	bl	8000cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	481b      	ldr	r0, [pc, #108]	; (80006fc <MX_ADC1_Init+0xf0>)
 800068e:	f000 ff8b 	bl	80015a8 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fb12 	bl	8000cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800069c:	2302      	movs	r3, #2
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4814      	ldr	r0, [pc, #80]	; (80006fc <MX_ADC1_Init+0xf0>)
 80006aa:	f000 ff7d 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b4:	f000 fb04 	bl	8000cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006b8:	2310      	movs	r3, #16
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006bc:	2303      	movs	r3, #3
 80006be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006c0:	2307      	movs	r3, #7
 80006c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <MX_ADC1_Init+0xf0>)
 80006ca:	f000 ff6d 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80006d4:	f000 faf4 	bl	8000cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80006d8:	2312      	movs	r3, #18
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC1_Init+0xf0>)
 80006e6:	f000 ff5f 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80006f0:	f000 fae6 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000036c 	.word	0x2000036c
 8000700:	40012000 	.word	0x40012000
 8000704:	0f000001 	.word	0x0f000001

08000708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C1_Init+0x50>)
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_I2C1_Init+0x54>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C1_Init+0x50>)
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_I2C1_Init+0x58>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_I2C1_Init+0x50>)
 8000726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2C1_Init+0x50>)
 8000746:	f001 fc05 	bl	8001f54 <HAL_I2C_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 fab6 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000288 	.word	0x20000288
 800075c:	40005400 	.word	0x40005400
 8000760:	00061a80 	.word	0x00061a80

08000764 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_RTC_Init+0x44>)
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_RTC_Init+0x48>)
 800076c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_RTC_Init+0x44>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_RTC_Init+0x44>)
 8000776:	227f      	movs	r2, #127	; 0x7f
 8000778:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_RTC_Init+0x44>)
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_RTC_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_RTC_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_RTC_Init+0x44>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_RTC_Init+0x44>)
 8000794:	f003 fc16 	bl	8003fc4 <HAL_RTC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800079e:	f000 fa8f 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200003f4 	.word	0x200003f4
 80007ac:	40002800 	.word	0x40002800

080007b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_SDIO_SD_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007e0:	f003 fcd5 	bl	800418e <HAL_SD_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80007ea:	f000 fa69 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80007ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_SDIO_SD_Init+0x58>)
 80007f4:	f003 ff00 	bl	80045f8 <HAL_SD_ConfigWideBusOperation>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 fa5f 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000414 	.word	0x20000414
 800080c:	40012c00 	.word	0x40012c00

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI1_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI1_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI1_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI1_Init+0x64>)
 8000862:	f004 fa01 	bl	8004c68 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 fa28 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000498 	.word	0x20000498
 8000878:	40013000 	.word	0x40013000

0800087c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI2_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008ce:	f004 f9cb 	bl	8004c68 <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 f9f2 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000230 	.word	0x20000230
 80008e4:	40003800 	.word	0x40003800

080008e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000918:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_TIM3_Init+0xe4>)
 800091a:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <MX_TIM3_Init+0xe8>)
 800091c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_TIM3_Init+0xe4>)
 8000920:	2201      	movs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MX_TIM3_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_TIM3_Init+0xe4>)
 800092c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_TIM3_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_TIM3_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093e:	4823      	ldr	r0, [pc, #140]	; (80009cc <MX_TIM3_Init+0xe4>)
 8000940:	f004 fa3a 	bl	8004db8 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800094a:	f000 f9b9 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000958:	4619      	mov	r1, r3
 800095a:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_TIM3_Init+0xe4>)
 800095c:	f004 fc7e 	bl	800525c <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000966:	f000 f9ab 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_TIM3_Init+0xe4>)
 800096c:	f004 fa73 	bl	8004e56 <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000976:	f000 f9a3 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4619      	mov	r1, r3
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <MX_TIM3_Init+0xe4>)
 800098a:	f005 f831 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000994:	f000 f994 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	220c      	movs	r2, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM3_Init+0xe4>)
 80009b0:	f004 fb8e 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009ba:	f000 f981 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM3_Init+0xe4>)
 80009c0:	f000 fb56 	bl	8001070 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000032c 	.word	0x2000032c
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f005 f880 	bl	8005b10 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f953 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200003b4 	.word	0x200003b4
 8000a24:	40011000 	.word	0x40011000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b61      	ldr	r3, [pc, #388]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a60      	ldr	r2, [pc, #384]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b5e      	ldr	r3, [pc, #376]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a59      	ldr	r2, [pc, #356]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_GPIO_Init+0x1a0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CS_FLASH_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f248 0102 	movw	r1, #32770	; 0x8002
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <MX_GPIO_Init+0x1a4>)
 8000aee:	f001 fa17 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	4836      	ldr	r0, [pc, #216]	; (8000bd0 <MX_GPIO_Init+0x1a8>)
 8000af8:	f001 fa12 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b02:	4834      	ldr	r0, [pc, #208]	; (8000bd4 <MX_GPIO_Init+0x1ac>)
 8000b04:	f001 fa0c 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0e:	4832      	ldr	r0, [pc, #200]	; (8000bd8 <MX_GPIO_Init+0x1b0>)
 8000b10:	f001 fa06 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CS_FLASH_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CS_FLASH_Pin;
 8000b14:	f248 0302 	movw	r3, #32770	; 0x8002
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4827      	ldr	r0, [pc, #156]	; (8000bcc <MX_GPIO_Init+0x1a4>)
 8000b2e:	f001 f85d 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 8000b32:	2320      	movs	r3, #32
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <MX_GPIO_Init+0x1a8>)
 8000b4a:	f001 f84f 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0x1ac>)
 8000b68:	f001 f840 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin;
 8000b6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MX_GPIO_Init+0x1ac>)
 8000b82:	f001 f833 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_ENTER_Pin|KEY_ESC_Pin;
 8000b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x1b0>)
 8000b9c:	f001 f826 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_GPIO_Init+0x1b0>)
 8000bba:	f001 f817 	bl	8001bec <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3730      	adds	r7, #48	; 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40020400 	.word	0x40020400

08000bdc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000bf6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000bfa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000bfe:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <MX_FSMC_Init+0xbc>)
 8000c00:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000c60:	23ff      	movs	r3, #255	; 0xff
 8000c62:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000c64:	230f      	movs	r3, #15
 8000c66:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000c6c:	2311      	movs	r3, #17
 8000c6e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_FSMC_Init+0xb8>)
 8000c7c:	f004 f858 	bl	8004d30 <HAL_SRAM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000c86:	f000 f81b 	bl	8000cc0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200002dc 	.word	0x200002dc
 8000c98:	a0000104 	.word	0xa0000104

08000c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cae:	f000 fbf5 	bl	800149c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_ADC_MspInit+0x7c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d127      	bne.n	8000d92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_ADC_MspInit+0x80>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_ADC_MspInit+0x84>)
 8000d8e:	f000 ff2d 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_I2C_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12b      	bne.n	8000e22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_I2C_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_I2C_MspInit+0x88>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_I2C_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de6:	23c0      	movs	r3, #192	; 0xc0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dea:	2312      	movs	r3, #18
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <HAL_I2C_MspInit+0x8c>)
 8000e02:	f000 fef3 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_I2C_MspInit+0x88>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_I2C_MspInit+0x88>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_I2C_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <HAL_RTC_MspInit+0x24>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d102      	bne.n	8000e50 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_RTC_MspInit+0x28>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40002800 	.word	0x40002800
 8000e60:	42470e3c 	.word	0x42470e3c

08000e64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_SD_MspInit+0xc0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d14a      	bne.n	8000f1c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_SD_MspInit+0xc4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000eda:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ede:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eec:	230c      	movs	r3, #12
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <HAL_SD_MspInit+0xc8>)
 8000ef8:	f000 fe78 	bl	8001bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efc:	2304      	movs	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f0c:	230c      	movs	r3, #12
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_SD_MspInit+0xcc>)
 8000f18:	f000 fe68 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00

08000f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a32      	ldr	r2, [pc, #200]	; (800101c <HAL_SPI_MspInit+0xe8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12c      	bne.n	8000fb0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a30      	ldr	r2, [pc, #192]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8000f8e:	2338      	movs	r3, #56	; 0x38
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481e      	ldr	r0, [pc, #120]	; (8001024 <HAL_SPI_MspInit+0xf0>)
 8000faa:	f000 fe1f 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fae:	e031      	b.n	8001014 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12c      	bne.n	8001014 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_SPI_MspInit+0xec>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 8000ff2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001004:	2305      	movs	r3, #5
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_SPI_MspInit+0xf0>)
 8001010:	f000 fdec 	bl	8001bec <HAL_GPIO_Init>
}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	; 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013000 	.word	0x40013000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020400 	.word	0x40020400
 8001028:	40003800 	.word	0x40003800

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010be:	2302      	movs	r3, #2
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_TIM_MspPostInit+0x70>)
 80010ca:	f000 fd8f 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_UART_MspInit+0x94>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d134      	bne.n	8001170 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_UART_MspInit+0x98>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_UART_MspInit+0x98>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_UART_MspInit+0x98>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x98>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a14      	ldr	r2, [pc, #80]	; (800117c <HAL_UART_MspInit+0x98>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_UART_MspInit+0x98>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800113e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001150:	2307      	movs	r3, #7
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_UART_MspInit+0x9c>)
 800115c:	f000 fd46 	bl	8001bec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2025      	movs	r0, #37	; 0x25
 8001166:	f000 fcf5 	bl	8001b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800116a:	2025      	movs	r0, #37	; 0x25
 800116c:	f000 fd0e 	bl	8001b8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40011000 	.word	0x40011000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_FSMC_MspInit+0x88>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d131      	bne.n	8001204 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_FSMC_MspInit+0x88>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_FSMC_MspInit+0x8c>)
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <HAL_FSMC_MspInit+0x8c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_FSMC_MspInit+0x8c>)
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011c2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80011c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011d4:	230c      	movs	r3, #12
 80011d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <HAL_FSMC_MspInit+0x90>)
 80011de:	f000 fd05 	bl	8001bec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80011e2:	f64c 03b3 	movw	r3, #51379	; 0xc8b3
 80011e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011f4:	230c      	movs	r3, #12
 80011f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <HAL_FSMC_MspInit+0x94>)
 80011fe:	f000 fcf5 	bl	8001bec <HAL_GPIO_Init>
 8001202:	e000      	b.n	8001206 <HAL_FSMC_MspInit+0x82>
    return;
 8001204:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000210 	.word	0x20000210
 8001210:	40023800 	.word	0x40023800
 8001214:	40021000 	.word	0x40021000
 8001218:	40020c00 	.word	0x40020c00

0800121c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001224:	f7ff ffae 	bl	8001184 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	2036      	movs	r0, #54	; 0x36
 8001246:	f000 fc85 	bl	8001b54 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800124a:	2036      	movs	r0, #54	; 0x36
 800124c:	f000 fc9e 	bl	8001b8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_InitTick+0xa4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_InitTick+0xa4>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_InitTick+0xa4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126c:	f107 0210 	add.w	r2, r7, #16
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fd90 	bl	8003d9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800127c:	f002 fd66 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8001280:	4603      	mov	r3, r0
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_InitTick+0xa8>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9b      	lsrs	r3, r3, #18
 8001290:	3b01      	subs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_InitTick+0xac>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_InitTick+0xb0>)
 8001298:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_InitTick+0xac>)
 800129c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_InitTick+0xac>)
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_InitTick+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_InitTick+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <HAL_InitTick+0xac>)
 80012b6:	f003 fd7f 	bl	8004db8 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d104      	bne.n	80012ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_InitTick+0xac>)
 80012c2:	f003 fda4 	bl	8004e0e <HAL_TIM_Base_Start_IT>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3730      	adds	r7, #48	; 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	200004f0 	.word	0x200004f0
 80012e0:	40001000 	.word	0x40001000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <USART1_IRQHandler+0x10>)
 800134a:	f004 fc2f 	bl	8005bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200003b4 	.word	0x200003b4

08001358 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM6_DAC_IRQHandler+0x10>)
 800135e:	f003 fdaf 	bl	8004ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004f0 	.word	0x200004f0

0800136c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <OTG_FS_IRQHandler+0x10>)
 8001372:	f001 f877 	bl	8002464 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20001e38 	.word	0x20001e38

08001380 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x50>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x16>
		heap_end = &end;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <_sbrk+0x50>)
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <_sbrk+0x54>)
 8001394:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <_sbrk+0x50>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <_sbrk+0x50>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	466a      	mov	r2, sp
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d907      	bls.n	80013ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013aa:	f009 fa83 	bl	800a8b4 <__errno>
 80013ae:	4602      	mov	r2, r0
 80013b0:	230c      	movs	r3, #12
 80013b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	e006      	b.n	80013c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <_sbrk+0x50>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <_sbrk+0x50>)
 80013c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000214 	.word	0x20000214
 80013d4:	20002248 	.word	0x20002248

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <SystemInit+0x28>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <SystemInit+0x28>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SystemInit+0x28>)
 80013ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f2:	609a      	str	r2, [r3, #8]
#endif
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800141a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
  ldr  r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001424:	f842 3b04 	str.w	r3, [r2], #4

08001428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800142a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800142e:	f7ff ffd3 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f009 fa45 	bl	800a8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff f847 	bl	80004c8 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001440:	0800ab34 	.word	0x0800ab34
  ldr  r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001448:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 800144c:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001450:	20002244 	.word	0x20002244

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 fb5c 	bl	8001b3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fed2 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fc20 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000530 	.word	0x20000530

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000530 	.word	0x20000530

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_Delay+0x40>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000008 	.word	0x20000008

08001520 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e033      	b.n	800159e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fbee 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001566:	f023 0302 	bic.w	r3, r3, #2
 800156a:	f043 0202 	orr.w	r2, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f93a 	bl	80017ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f023 0303 	bic.w	r3, r3, #3
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
 800158e:	e001      	b.n	8001594 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1c>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e105      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x228>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d925      	bls.n	8001620 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68d9      	ldr	r1, [r3, #12]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	3b1e      	subs	r3, #30
 80015ea:	2207      	movs	r2, #7
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68d9      	ldr	r1, [r3, #12]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	4603      	mov	r3, r0
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4403      	add	r3, r0
 8001612:	3b1e      	subs	r3, #30
 8001614:	409a      	lsls	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	e022      	b.n	8001666 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	2207      	movs	r2, #7
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	4603      	mov	r3, r0
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4403      	add	r3, r0
 800165c:	409a      	lsls	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b06      	cmp	r3, #6
 800166c:	d824      	bhi.n	80016b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b05      	subs	r3, #5
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3b05      	subs	r3, #5
 80016aa:	fa00 f203 	lsl.w	r2, r0, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
 80016b6:	e04c      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d824      	bhi.n	800170a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b23      	subs	r3, #35	; 0x23
 80016d2:	221f      	movs	r2, #31
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b23      	subs	r3, #35	; 0x23
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
 8001708:	e023      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	; 0x41
 800171c:	221f      	movs	r2, #31
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	400a      	ands	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b41      	subs	r3, #65	; 0x41
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_ADC_ConfigChannel+0x234>)
 8001754:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_ADC_ConfigChannel+0x238>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d109      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1cc>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b12      	cmp	r3, #18
 8001766:	d105      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_ADC_ConfigChannel+0x238>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d003      	beq.n	800178e <HAL_ADC_ConfigChannel+0x1e6>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b11      	cmp	r3, #17
 800178c:	d11b      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d111      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_ADC_ConfigChannel+0x23c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_ADC_ConfigChannel+0x240>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	0c9a      	lsrs	r2, r3, #18
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40012300 	.word	0x40012300
 80017e0:	40012000 	.word	0x40012000
 80017e4:	20000000 	.word	0x20000000
 80017e8:	431bde83 	.word	0x431bde83

080017ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f4:	4b79      	ldr	r3, [pc, #484]	; (80019dc <ADC_Init+0x1f0>)
 80017f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	431a      	orrs	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <ADC_Init+0x1f4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d022      	beq.n	80018ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e00f      	b.n	80018ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0202 	bic.w	r2, r2, #2
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e1b      	ldrb	r3, [r3, #24]
 8001904:	005a      	lsls	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01b      	beq.n	8001950 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001926:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6859      	ldr	r1, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	3b01      	subs	r3, #1
 8001944:	035a      	lsls	r2, r3, #13
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	e007      	b.n	8001960 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	3b01      	subs	r3, #1
 800197c:	051a      	lsls	r2, r3, #20
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6899      	ldr	r1, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019a2:	025a      	lsls	r2, r3, #9
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	029a      	lsls	r2, r3, #10
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40012300 	.word	0x40012300
 80019e0:	0f000001 	.word	0x0f000001

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff4c 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b66:	f7ff ff61 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001b6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f7ff ffb1 	bl	8001ad8 <NVIC_EncodePriority>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff80 	bl	8001a84 <__NVIC_SetPriority>
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff54 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d004      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00c      	b.n	8001be0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2205      	movs	r2, #5
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e16b      	b.n	8001ee0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 815a 	bne.w	8001eda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d00b      	beq.n	8001c46 <HAL_GPIO_Init+0x5a>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3a:	2b11      	cmp	r3, #17
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0xfc>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	d123      	bne.n	8001d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	69b9      	ldr	r1, [r7, #24]
 8001d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80b4 	beq.w	8001eda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_GPIO_Init+0x308>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a5e      	ldr	r2, [pc, #376]	; (8001ef4 <HAL_GPIO_Init+0x308>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_GPIO_Init+0x308>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8e:	4a5a      	ldr	r2, [pc, #360]	; (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a51      	ldr	r2, [pc, #324]	; (8001efc <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x222>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x21e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x21a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x216>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_GPIO_Init+0x324>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_GPIO_Init+0x328>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x20a>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e00e      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001df6:	2308      	movs	r3, #8
 8001df8:	e00c      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e00a      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e008      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e12:	2300      	movs	r3, #0
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e24:	4934      	ldr	r1, [pc, #208]	; (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e56:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	f67f ae90 	bls.w	8001c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40021c00 	.word	0x40021c00
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e11f      	b.n	80021a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe ff14 	bl	8000da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb8:	f001 fec8 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8001fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a7b      	ldr	r2, [pc, #492]	; (80021b0 <HAL_I2C_Init+0x25c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d807      	bhi.n	8001fd8 <HAL_I2C_Init+0x84>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_I2C_Init+0x260>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e006      	b.n	8001fe6 <HAL_I2C_Init+0x92>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a77      	ldr	r2, [pc, #476]	; (80021b8 <HAL_I2C_Init+0x264>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0db      	b.n	80021a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_I2C_Init+0x268>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a64      	ldr	r2, [pc, #400]	; (80021b0 <HAL_I2C_Init+0x25c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d802      	bhi.n	8002028 <HAL_I2C_Init+0xd4>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	e009      	b.n	800203c <HAL_I2C_Init+0xe8>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a63      	ldr	r2, [pc, #396]	; (80021c0 <HAL_I2C_Init+0x26c>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4956      	ldr	r1, [pc, #344]	; (80021b0 <HAL_I2C_Init+0x25c>)
 8002058:	428b      	cmp	r3, r1
 800205a:	d80d      	bhi.n	8002078 <HAL_I2C_Init+0x124>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e59      	subs	r1, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fbb1 f3f3 	udiv	r3, r1, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	2b04      	cmp	r3, #4
 8002072:	bf38      	it	cc
 8002074:	2304      	movcc	r3, #4
 8002076:	e04f      	b.n	8002118 <HAL_I2C_Init+0x1c4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d111      	bne.n	80020a4 <HAL_I2C_Init+0x150>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e012      	b.n	80020ca <HAL_I2C_Init+0x176>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	0099      	lsls	r1, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Init+0x17e>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e022      	b.n	8002118 <HAL_I2C_Init+0x1c4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10e      	bne.n	80020f8 <HAL_I2C_Init+0x1a4>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e58      	subs	r0, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	440b      	add	r3, r1
 80020e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	e00f      	b.n	8002118 <HAL_I2C_Init+0x1c4>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	0099      	lsls	r1, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	6809      	ldr	r1, [r1, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6911      	ldr	r1, [r2, #16]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68d2      	ldr	r2, [r2, #12]
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	000186a0 	.word	0x000186a0
 80021b4:	001e847f 	.word	0x001e847f
 80021b8:	003d08ff 	.word	0x003d08ff
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	10624dd3 	.word	0x10624dd3

080021c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	b08f      	sub	sp, #60	; 0x3c
 80021c8:	af0a      	add	r7, sp, #40	; 0x28
 80021ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e10f      	b.n	80023f6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f008 f85f 	bl	800a2b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f005 f8f2 	bl	80073fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	687e      	ldr	r6, [r7, #4]
 8002222:	466d      	mov	r5, sp
 8002224:	f106 0410 	add.w	r4, r6, #16
 8002228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002234:	e885 0003 	stmia.w	r5, {r0, r1}
 8002238:	1d33      	adds	r3, r6, #4
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	6838      	ldr	r0, [r7, #0]
 800223e:	f004 ffc9 	bl	80071d4 <USB_CoreInit>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0d0      	b.n	80023f6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f005 f8e0 	bl	8007420 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e04a      	b.n	80022fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	333d      	adds	r3, #61	; 0x3d
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	333c      	adds	r3, #60	; 0x3c
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	b298      	uxth	r0, r3
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3342      	adds	r3, #66	; 0x42
 80022a2:	4602      	mov	r2, r0
 80022a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	333f      	adds	r3, #63	; 0x3f
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3344      	adds	r3, #68	; 0x44
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3348      	adds	r3, #72	; 0x48
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	3350      	adds	r3, #80	; 0x50
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3af      	bcc.n	8002266 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e044      	b.n	8002396 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3301      	adds	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d3b5      	bcc.n	800230c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	687e      	ldr	r6, [r7, #4]
 80023a8:	466d      	mov	r5, sp
 80023aa:	f106 0410 	add.w	r4, r6, #16
 80023ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80023be:	1d33      	adds	r3, r6, #4
 80023c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	f005 f856 	bl	8007474 <USB_DevInit>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00d      	b.n	80023f6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f006 f84b 	bl	800848a <USB_DevDisconnect>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_PCD_Start+0x1c>
 8002416:	2302      	movs	r3, #2
 8002418:	e020      	b.n	800245c <HAL_PCD_Start+0x5e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	2b01      	cmp	r3, #1
 8002428:	d109      	bne.n	800243e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f006 f809 	bl	800845a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f004 ffc5 	bl	80073dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08d      	sub	sp, #52	; 0x34
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f006 f8b0 	bl	80085e0 <USB_GetMode>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 838e 	bne.w	8002ba4 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f006 f814 	bl	80084ba <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8384 	beq.w	8002ba2 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f006 f80b 	bl	80084ba <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f002 0202 	and.w	r2, r2, #2
 80024bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fff9 	bl	80084ba <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024d2:	d17b      	bne.n	80025cc <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f005 ffff 	bl	80084e0 <USB_ReadDevAllOutEpInterrupt>
 80024e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024e4:	e06f      	b.n	80025c6 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d064      	beq.n	80025ba <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f006 f824 	bl	8008548 <USB_ReadDevOutEPInterrupt>
 8002500:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2301      	movs	r3, #1
 800251c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fe0d 	bl	8003140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00c      	beq.n	800254a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 ff0c 	bl	8003350 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002544:	461a      	mov	r2, r3
 8002546:	2308      	movs	r3, #8
 8002548:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002560:	461a      	mov	r2, r3
 8002562:	2310      	movs	r3, #16
 8002564:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002582:	461a      	mov	r2, r3
 8002584:	2101      	movs	r1, #1
 8002586:	f006 f86f 	bl	8008668 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	461a      	mov	r2, r3
 8002598:	2320      	movs	r3, #32
 800259a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b2:	461a      	mov	r2, r3
 80025b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d18c      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f005 ff72 	bl	80084ba <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e0:	f040 80c4 	bne.w	800276c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 ff93 	bl	8008514 <USB_ReadDevAllInEpInterrupt>
 80025ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025f4:	e0b6      	b.n	8002764 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80ab 	beq.w	8002758 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f005 ffb9 	bl	8008584 <USB_ReadDevInEPInterrupt>
 8002612:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d05b      	beq.n	80026d6 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	2201      	movs	r2, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	43db      	mvns	r3, r3
 8002638:	69f9      	ldr	r1, [r7, #28]
 800263a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800263e:	4013      	ands	r3, r2
 8002640:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264e:	461a      	mov	r2, r3
 8002650:	2301      	movs	r3, #1
 8002652:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d11b      	bne.n	8002694 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3348      	adds	r3, #72	; 0x48
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4403      	add	r3, r0
 800267c:	3344      	adds	r3, #68	; 0x44
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4419      	add	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4403      	add	r3, r0
 8002690:	3348      	adds	r3, #72	; 0x48
 8002692:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f007 fe8b 	bl	800a3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d116      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x272>
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3350      	adds	r3, #80	; 0x50
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026ce:	461a      	mov	r2, r3
 80026d0:	2101      	movs	r1, #1
 80026d2:	f005 ffc9 	bl	8008668 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ec:	461a      	mov	r2, r3
 80026ee:	2308      	movs	r3, #8
 80026f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002708:	461a      	mov	r2, r3
 800270a:	2310      	movs	r3, #16
 800270c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002724:	461a      	mov	r2, r3
 8002726:	2340      	movs	r3, #64	; 0x40
 8002728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002740:	461a      	mov	r2, r3
 8002742:	2302      	movs	r3, #2
 8002744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fc67 	bl	8003026 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3301      	adds	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f af45 	bne.w	80025f6 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f005 fea2 	bl	80084ba <USB_ReadInterrupts>
 8002776:	4603      	mov	r3, r0
 8002778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800277c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002780:	d122      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800279c:	2b01      	cmp	r3, #1
 800279e:	d108      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fe88 	bl	80034c0 <HAL_PCDEx_LPM_Callback>
 80027b0:	e002      	b.n	80027b8 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f007 fe76 	bl	800a4a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f005 fe74 	bl	80084ba <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027dc:	d112      	bne.n	8002804 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d102      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f007 fe32 	bl	800a458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002802:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f005 fe56 	bl	80084ba <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002818:	f040 80a7 	bne.w	800296a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2110      	movs	r1, #16
 8002836:	4618      	mov	r0, r3
 8002838:	f004 ff8e 	bl	8007758 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002840:	e036      	b.n	80028b0 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284e:	461a      	mov	r2, r3
 8002850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002854:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002866:	0151      	lsls	r1, r2, #5
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	440a      	add	r2, r1
 800286c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002870:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002874:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002888:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	3301      	adds	r3, #1
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d3c3      	bcc.n	8002842 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e6:	f043 030b 	orr.w	r3, r3, #11
 80028ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fc:	f043 030b 	orr.w	r3, r3, #11
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	e015      	b.n	8002930 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002916:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800291a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292a:	f043 030b 	orr.w	r3, r3, #11
 800292e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002942:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002954:	461a      	mov	r2, r3
 8002956:	f005 fe87 	bl	8008668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f005 fda3 	bl	80084ba <USB_ReadInterrupts>
 8002974:	4603      	mov	r3, r0
 8002976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297e:	d124      	bne.n	80029ca <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f005 fe39 	bl	80085fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f004 ff43 	bl	800781a <USB_GetDevSpeed>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681c      	ldr	r4, [r3, #0]
 80029a0:	f001 f9c8 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 80029a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	4620      	mov	r0, r4
 80029b0:	f004 fc72 	bl	8007298 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f007 fd26 	bl	800a406 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f005 fd73 	bl	80084ba <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d161      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0210 	bic.w	r2, r2, #16
 80029ec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	0c5b      	lsrs	r3, r3, #17
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d124      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d035      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	6a38      	ldr	r0, [r7, #32]
 8002a3a:	f005 fbeb 	bl	8008214 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4a:	441a      	add	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	619a      	str	r2, [r3, #24]
 8002a62:	e016      	b.n	8002a92 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	0c5b      	lsrs	r3, r3, #17
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d110      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a76:	2208      	movs	r2, #8
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6a38      	ldr	r0, [r7, #32]
 8002a7c:	f005 fbca 	bl	8008214 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8c:	441a      	add	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0210 	orr.w	r2, r2, #16
 8002aa0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f005 fd07 	bl	80084ba <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d10a      	bne.n	8002acc <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f007 fc97 	bl	800a3ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f002 0208 	and.w	r2, r2, #8
 8002aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f005 fcf2 	bl	80084ba <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae0:	d10f      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f007 fcf9 	bl	800a4e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f005 fcd7 	bl	80084ba <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b16:	d10f      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f007 fccc 	bl	800a4c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f005 fcbc 	bl	80084ba <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d10a      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f007 fcda 	bl	800a508 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f005 fca6 	bl	80084ba <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d115      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f007 fcca 	bl	800a524 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	e000      	b.n	8002ba4 <HAL_PCD_IRQHandler+0x740>
      return;
 8002ba2:	bf00      	nop
    }
  }
}
 8002ba4:	3734      	adds	r7, #52	; 0x34
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd90      	pop	{r4, r7, pc}

08002baa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_PCD_SetAddress+0x1a>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e013      	b.n	8002bec <HAL_PCD_SetAddress+0x42>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f005 fc16 	bl	800840e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	70fb      	strb	r3, [r7, #3]
 8002c06:	460b      	mov	r3, r1
 8002c08:	803b      	strh	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da0f      	bge.n	8002c3a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	3338      	adds	r3, #56	; 0x38
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	705a      	strb	r2, [r3, #1]
 8002c38:	e00f      	b.n	8002c5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c66:	883a      	ldrh	r2, [r7, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	78ba      	ldrb	r2, [r7, #2]
 8002c70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_PCD_EP_Open+0xaa>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e00e      	b.n	8002cbc <HAL_PCD_EP_Open+0xc8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68f9      	ldr	r1, [r7, #12]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 fdd9 	bl	8007864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cba:	7afb      	ldrb	r3, [r7, #11]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da0f      	bge.n	8002cf8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	3338      	adds	r3, #56	; 0x38
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	3304      	adds	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	705a      	strb	r2, [r3, #1]
 8002cf6:	e00f      	b.n	8002d18 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_PCD_EP_Close+0x6e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e00e      	b.n	8002d50 <HAL_PCD_EP_Close+0x8c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fe17 	bl	8007974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	460b      	mov	r3, r1
 8002d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2200      	movs	r2, #0
 8002d98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6979      	ldr	r1, [r7, #20]
 8002dcc:	f005 f89a 	bl	8007f04 <USB_EP0StartXfer>
 8002dd0:	e008      	b.n	8002de4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6979      	ldr	r1, [r7, #20]
 8002de0:	f004 fe4c 	bl	8007a7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e10:	681b      	ldr	r3, [r3, #0]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	3338      	adds	r3, #56	; 0x38
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6979      	ldr	r1, [r7, #20]
 8002e90:	f005 f838 	bl	8007f04 <USB_EP0StartXfer>
 8002e94:	e008      	b.n	8002ea8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6979      	ldr	r1, [r7, #20]
 8002ea4:	f004 fdea 	bl	8007a7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d901      	bls.n	8002ed0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e050      	b.n	8002f72 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da0f      	bge.n	8002ef8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3338      	adds	r3, #56	; 0x38
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	705a      	strb	r2, [r3, #1]
 8002ef6:	e00d      	b.n	8002f14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_EP_SetStall+0x82>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e01e      	b.n	8002f72 <HAL_PCD_EP_SetStall+0xc0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 f98f 	bl	8008266 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	b2d9      	uxtb	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f62:	461a      	mov	r2, r3
 8002f64:	f005 fb80 	bl	8008668 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d901      	bls.n	8002f98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e042      	b.n	800301e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da0f      	bge.n	8002fc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3338      	adds	r3, #56	; 0x38
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	705a      	strb	r2, [r3, #1]
 8002fbe:	e00f      	b.n	8002fe0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_PCD_EP_ClrStall+0x86>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e00e      	b.n	800301e <HAL_PCD_EP_ClrStall+0xa4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	4618      	mov	r0, r3
 8003010:	f005 f997 	bl	8008342 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b08a      	sub	sp, #40	; 0x28
 800302a:	af02      	add	r7, sp, #8
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3338      	adds	r3, #56	; 0x38
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	429a      	cmp	r2, r3
 8003058:	d901      	bls.n	800305e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06c      	b.n	8003138 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	429a      	cmp	r2, r3
 8003072:	d902      	bls.n	800307a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3303      	adds	r3, #3
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003082:	e02b      	b.n	80030dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	429a      	cmp	r2, r3
 8003098:	d902      	bls.n	80030a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3303      	adds	r3, #3
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68d9      	ldr	r1, [r3, #12]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4603      	mov	r3, r0
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f005 f873 	bl	80081aa <USB_WritePacket>

    ep->xfer_buff  += len;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	441a      	add	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	441a      	add	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d809      	bhi.n	8003106 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d203      	bcs.n	8003106 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1be      	bne.n	8003084 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	429a      	cmp	r2, r3
 8003110:	d811      	bhi.n	8003136 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	2201      	movs	r2, #1
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	43db      	mvns	r3, r3
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003132:	4013      	ands	r3, r2
 8003134:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	333c      	adds	r3, #60	; 0x3c
 8003158:	3304      	adds	r3, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 80b3 	bne.w	80032de <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d028      	beq.n	80031d4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a70      	ldr	r2, [pc, #448]	; (8003348 <PCD_EP_OutXfrComplete_int+0x208>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d90e      	bls.n	80031a8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a0:	461a      	mov	r2, r3
 80031a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f007 f8d7 	bl	800a35c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031b8:	461a      	mov	r2, r3
 80031ba:	2101      	movs	r1, #1
 80031bc:	f005 fa54 	bl	8008668 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	2308      	movs	r3, #8
 80031d0:	6093      	str	r3, [r2, #8]
 80031d2:	e0b3      	b.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ea:	461a      	mov	r2, r3
 80031ec:	2320      	movs	r3, #32
 80031ee:	6093      	str	r3, [r2, #8]
 80031f0:	e0a4      	b.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f040 809f 	bne.w	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a51      	ldr	r2, [pc, #324]	; (8003348 <PCD_EP_OutXfrComplete_int+0x208>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d90f      	bls.n	8003226 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	6093      	str	r3, [r2, #8]
 8003224:	e08a      	b.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003238:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	0159      	lsls	r1, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	440b      	add	r3, r1
 8003242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800324c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4403      	add	r3, r0
 800325c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003260:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4403      	add	r3, r0
 8003284:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4419      	add	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4403      	add	r3, r0
 800329a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800329e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f007 f86a 	bl	800a380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d144      	bne.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d138      	bne.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032d4:	461a      	mov	r2, r3
 80032d6:	2101      	movs	r1, #1
 80032d8:	f005 f9c6 	bl	8008668 <USB_EP0_OutStart>
 80032dc:	e02e      	b.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <PCD_EP_OutXfrComplete_int+0x20c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d124      	bne.n	8003330 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	e01a      	b.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	2320      	movs	r3, #32
 8003320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f007 f829 	bl	800a380 <HAL_PCD_DataOutStageCallback>
 800332e:	e005      	b.n	800333c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f007 f822 	bl	800a380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	4f54300a 	.word	0x4f54300a
 800334c:	4f54310a 	.word	0x4f54310a

08003350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	333c      	adds	r3, #60	; 0x3c
 8003368:	3304      	adds	r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d113      	bne.n	80033ae <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <PCD_EP_OutSetupPacket_int+0xb8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d922      	bls.n	80033d4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01d      	beq.n	80033d4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	6093      	str	r3, [r2, #8]
 80033ac:	e012      	b.n	80033d4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a16      	ldr	r2, [pc, #88]	; (800340c <PCD_EP_OutSetupPacket_int+0xbc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10e      	bne.n	80033d4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f006 ffc1 	bl	800a35c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <PCD_EP_OutSetupPacket_int+0xb8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d90c      	bls.n	80033fc <PCD_EP_OutSetupPacket_int+0xac>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033f4:	461a      	mov	r2, r3
 80033f6:	2101      	movs	r1, #1
 80033f8:	f005 f936 	bl	8008668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	4f54300a 	.word	0x4f54300a
 800340c:	4f54310a 	.word	0x4f54310a

08003410 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	70fb      	strb	r3, [r7, #3]
 800341c:	4613      	mov	r3, r2
 800341e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800342e:	883b      	ldrh	r3, [r7, #0]
 8003430:	0419      	lsls	r1, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	430a      	orrs	r2, r1
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
 800343c:	e028      	b.n	8003490 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4413      	add	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e00d      	b.n	800346e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	3340      	adds	r3, #64	; 0x40
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	3301      	adds	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	3b01      	subs	r3, #1
 8003474:	429a      	cmp	r2, r3
 8003476:	d3ec      	bcc.n	8003452 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003478:	883b      	ldrh	r3, [r7, #0]
 800347a:	0418      	lsls	r0, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	3b01      	subs	r3, #1
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4302      	orrs	r2, r0
 8003488:	3340      	adds	r3, #64	; 0x40
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e25b      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d075      	beq.n	80035e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f6:	4ba3      	ldr	r3, [pc, #652]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d00c      	beq.n	800351c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4ba0      	ldr	r3, [pc, #640]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350a:	2b08      	cmp	r3, #8
 800350c:	d112      	bne.n	8003534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b9d      	ldr	r3, [pc, #628]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351a:	d10b      	bne.n	8003534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	4b99      	ldr	r3, [pc, #612]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05b      	beq.n	80035e0 <HAL_RCC_OscConfig+0x108>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d157      	bne.n	80035e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e236      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x74>
 800353e:	4b91      	ldr	r3, [pc, #580]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a90      	ldr	r2, [pc, #576]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xb0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x98>
 8003556:	4b8b      	ldr	r3, [pc, #556]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a8a      	ldr	r2, [pc, #552]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a87      	ldr	r2, [pc, #540]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xb0>
 8003570:	4b84      	ldr	r3, [pc, #528]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a83      	ldr	r2, [pc, #524]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b81      	ldr	r3, [pc, #516]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a80      	ldr	r2, [pc, #512]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd ff98 	bl	80014c4 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003598:	f7fd ff94 	bl	80014c4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1fb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b76      	ldr	r3, [pc, #472]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xc0>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd ff84 	bl	80014c4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd ff80 	bl	80014c4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1e7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b6c      	ldr	r3, [pc, #432]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0xe8>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ee:	4b65      	ldr	r3, [pc, #404]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b62      	ldr	r3, [pc, #392]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b5f      	ldr	r3, [pc, #380]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x152>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1bb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b56      	ldr	r3, [pc, #344]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4952      	ldr	r1, [pc, #328]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b4f      	ldr	r3, [pc, #316]	; (8003788 <HAL_RCC_OscConfig+0x2b0>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fd ff39 	bl	80014c4 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fd ff35 	bl	80014c4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e19c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4940      	ldr	r1, [pc, #256]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_RCC_OscConfig+0x2b0>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd ff18 	bl	80014c4 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003698:	f7fd ff14 	bl	80014c4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e17b      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d030      	beq.n	8003724 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b30      	ldr	r3, [pc, #192]	; (800378c <HAL_RCC_OscConfig+0x2b4>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fef8 	bl	80014c4 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fd fef4 	bl	80014c4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e15b      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x200>
 80036f6:	e015      	b.n	8003724 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x2b4>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fd fee1 	bl	80014c4 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003706:	f7fd fedd 	bl	80014c4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e144      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a0 	beq.w	8003872 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_OscConfig+0x2b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d121      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_RCC_OscConfig+0x2b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a07      	ldr	r2, [pc, #28]	; (8003790 <HAL_RCC_OscConfig+0x2b8>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fd fea3 	bl	80014c4 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e011      	b.n	80037a6 <HAL_RCC_OscConfig+0x2ce>
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	42470000 	.word	0x42470000
 800378c:	42470e80 	.word	0x42470e80
 8003790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fd fe96 	bl	80014c4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0fd      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b81      	ldr	r3, [pc, #516]	; (80039ac <HAL_RCC_OscConfig+0x4d4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d106      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2f0>
 80037ba:	4b7d      	ldr	r3, [pc, #500]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
 80037c6:	e01c      	b.n	8003802 <HAL_RCC_OscConfig+0x32a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d10c      	bne.n	80037ea <HAL_RCC_OscConfig+0x312>
 80037d0:	4b77      	ldr	r3, [pc, #476]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a76      	ldr	r2, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037d6:	f043 0304 	orr.w	r3, r3, #4
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	4b74      	ldr	r3, [pc, #464]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a73      	ldr	r2, [pc, #460]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	e00b      	b.n	8003802 <HAL_RCC_OscConfig+0x32a>
 80037ea:	4b71      	ldr	r3, [pc, #452]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a70      	ldr	r2, [pc, #448]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	4b6e      	ldr	r3, [pc, #440]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a6d      	ldr	r2, [pc, #436]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d015      	beq.n	8003836 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fd fe5b 	bl	80014c4 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fd fe57 	bl	80014c4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e0bc      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ee      	beq.n	8003812 <HAL_RCC_OscConfig+0x33a>
 8003834:	e014      	b.n	8003860 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003836:	f7fd fe45 	bl	80014c4 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fd fe41 	bl	80014c4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0a6      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003854:	4b56      	ldr	r3, [pc, #344]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ee      	bne.n	800383e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d105      	bne.n	8003872 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003866:	4b52      	ldr	r3, [pc, #328]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8092 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d05c      	beq.n	8003942 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d141      	bne.n	8003914 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <HAL_RCC_OscConfig+0x4dc>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd fe15 	bl	80014c4 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fd fe11 	bl	80014c4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e078      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	019b      	lsls	r3, r3, #6
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	4933      	ldr	r1, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_RCC_OscConfig+0x4dc>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd fdea 	bl	80014c4 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fde6 	bl	80014c4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04d      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x41c>
 8003912:	e045      	b.n	80039a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_RCC_OscConfig+0x4dc>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fd fdd3 	bl	80014c4 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fd fdcf 	bl	80014c4 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e036      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003934:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x44a>
 8003940:	e02e      	b.n	80039a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e029      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <HAL_RCC_OscConfig+0x4d8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	429a      	cmp	r2, r3
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d115      	bne.n	800399c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800397c:	4293      	cmp	r3, r2
 800397e:	d10d      	bne.n	800399c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d106      	bne.n	800399c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40007000 	.word	0x40007000
 80039b0:	40023800 	.word	0x40023800
 80039b4:	42470060 	.word	0x42470060

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0cc      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d90c      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d044      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e067      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4934      	ldr	r1, [pc, #208]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fd0c 	bl	80014c4 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fd fd08 	bl	80014c4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20c      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f821 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	fa21 f303 	lsr.w	r3, r1, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fb66 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	0800ab0c 	.word	0x0800ab0c
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	20000004 	.word	0x20000004

08003b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d007      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x32>
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x38>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 80b4 	bne.w	8003d18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bb2:	60bb      	str	r3, [r7, #8]
       break;
 8003bb4:	e0b3      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bb8:	60bb      	str	r3, [r7, #8]
      break;
 8003bba:	e0b0      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b58      	ldr	r3, [pc, #352]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d04a      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	ea03 0501 	and.w	r5, r3, r1
 8003be8:	ea04 0602 	and.w	r6, r4, r2
 8003bec:	4629      	mov	r1, r5
 8003bee:	4632      	mov	r2, r6
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	0154      	lsls	r4, r2, #5
 8003bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bfe:	014b      	lsls	r3, r1, #5
 8003c00:	4619      	mov	r1, r3
 8003c02:	4622      	mov	r2, r4
 8003c04:	1b49      	subs	r1, r1, r5
 8003c06:	eb62 0206 	sbc.w	r2, r2, r6
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	f04f 0400 	mov.w	r4, #0
 8003c12:	0194      	lsls	r4, r2, #6
 8003c14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c18:	018b      	lsls	r3, r1, #6
 8003c1a:	1a5b      	subs	r3, r3, r1
 8003c1c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	00e2      	lsls	r2, r4, #3
 8003c2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c2e:	00d9      	lsls	r1, r3, #3
 8003c30:	460b      	mov	r3, r1
 8003c32:	4614      	mov	r4, r2
 8003c34:	195b      	adds	r3, r3, r5
 8003c36:	eb44 0406 	adc.w	r4, r4, r6
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	0262      	lsls	r2, r4, #9
 8003c44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c48:	0259      	lsls	r1, r3, #9
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4621      	mov	r1, r4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	f7fc fab4 	bl	80001c8 <__aeabi_uldivmod>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e049      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c68:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	ea03 0501 	and.w	r5, r3, r1
 8003c7e:	ea04 0602 	and.w	r6, r4, r2
 8003c82:	4629      	mov	r1, r5
 8003c84:	4632      	mov	r2, r6
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	f04f 0400 	mov.w	r4, #0
 8003c8e:	0154      	lsls	r4, r2, #5
 8003c90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c94:	014b      	lsls	r3, r1, #5
 8003c96:	4619      	mov	r1, r3
 8003c98:	4622      	mov	r2, r4
 8003c9a:	1b49      	subs	r1, r1, r5
 8003c9c:	eb62 0206 	sbc.w	r2, r2, r6
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	0194      	lsls	r4, r2, #6
 8003caa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cae:	018b      	lsls	r3, r1, #6
 8003cb0:	1a5b      	subs	r3, r3, r1
 8003cb2:	eb64 0402 	sbc.w	r4, r4, r2
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	00e2      	lsls	r2, r4, #3
 8003cc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cc4:	00d9      	lsls	r1, r3, #3
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	195b      	adds	r3, r3, r5
 8003ccc:	eb44 0406 	adc.w	r4, r4, r6
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	02a2      	lsls	r2, r4, #10
 8003cda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cde:	0299      	lsls	r1, r3, #10
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	f7fc fa69 	bl	80001c8 <__aeabi_uldivmod>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	60bb      	str	r3, [r7, #8]
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d1a:	60bb      	str	r3, [r7, #8]
      break;
 8003d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4601      	mov	r1, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a9b      	lsrs	r3, r3, #10
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	0800ab1c 	.word	0x0800ab1c

08003d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d78:	f7ff ffdc 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0b5b      	lsrs	r3, r3, #13
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d8a:	5cd3      	ldrb	r3, [r2, r3]
 8003d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	0800ab1c 	.word	0x0800ab1c

08003d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	220f      	movs	r2, #15
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	08db      	lsrs	r3, r3, #3
 8003dd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCC_GetClockConfig+0x60>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40023c00 	.word	0x40023c00

08003e00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d035      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e28:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fb49 	bl	80014c4 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e36:	f7fd fb45 	bl	80014c4 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0b0      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e48:	4b5b      	ldr	r3, [pc, #364]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	019a      	lsls	r2, r3, #6
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	4955      	ldr	r1, [pc, #340]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e68:	4b52      	ldr	r3, [pc, #328]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e6e:	f7fd fb29 	bl	80014c4 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e76:	f7fd fb25 	bl	80014c4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e090      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e88:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8083 	beq.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fafb 	bl	80014c4 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fd faf7 	bl	80014c4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e062      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ee4:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02f      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d028      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f18:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1e:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f24:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f2a:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d114      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fd fac5 	bl	80014c4 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fd fac1 	bl	80014c4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e02a      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ee      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f82:	490d      	ldr	r1, [pc, #52]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]
 8003f88:	e005      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f94:	6093      	str	r3, [r2, #8]
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa2:	4905      	ldr	r1, [pc, #20]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	42470068 	.word	0x42470068
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	42470e40 	.word	0x42470e40

08003fc4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e083      	b.n	80040de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7f5b      	ldrb	r3, [r3, #29]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc ff26 	bl	8000e38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ca      	movs	r2, #202	; 0xca
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2253      	movs	r2, #83	; 0x53
 8004000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f897 	bl	8004136 <RTC_EnterInitMode>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2204      	movs	r2, #4
 800401a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e05e      	b.n	80040de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004032:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6919      	ldr	r1, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	041a      	lsls	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800407e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10e      	bne.n	80040ac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f829 	bl	80040e6 <HAL_RTC_WaitForSynchro>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e018      	b.n	80040de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	22ff      	movs	r2, #255	; 0xff
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004100:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004102:	f7fd f9df 	bl	80014c4 <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004108:	e009      	b.n	800411e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800410a:	f7fd f9db 	bl	80014c4 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004118:	d901      	bls.n	800411e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e007      	b.n	800412e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d119      	bne.n	8004184 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800415a:	f7fd f9b3 	bl	80014c4 <HAL_GetTick>
 800415e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004160:	e009      	b.n	8004176 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004162:	f7fd f9af 	bl	80014c4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	d901      	bls.n	8004176 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e007      	b.n	8004186 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e022      	b.n	80041e6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fe56 	bl	8000e64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2203      	movs	r2, #3
 80041bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f815 	bl	80041f0 <HAL_SD_InitCard>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e00a      	b.n	80041e6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	b08e      	sub	sp, #56	; 0x38
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800420c:	2376      	movs	r3, #118	; 0x76
 800420e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681d      	ldr	r5, [r3, #0]
 8004214:	466c      	mov	r4, sp
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800421e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004228:	4628      	mov	r0, r5
 800422a:	f002 fb4b 	bl	80068c4 <SDIO_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e031      	b.n	80042a4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_SD_InitCard+0xbc>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f002 fb72 	bl	8006934 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004250:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_SD_InitCard+0xbc>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fb18 	bl	800488c <SD_PowerON>
 800425c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e013      	b.n	80042a4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fa37 	bl	80046f0 <SD_InitCard>
 8004282:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bdb0      	pop	{r4, r5, r7, pc}
 80042ac:	422580a0 	.word	0x422580a0

080042b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042be:	0f9b      	lsrs	r3, r3, #30
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042dc:	0e1b      	lsrs	r3, r3, #24
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004310:	0d1b      	lsrs	r3, r3, #20
 8004312:	b29a      	uxth	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432e:	0bdb      	lsrs	r3, r3, #15
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004340:	0b9b      	lsrs	r3, r3, #14
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	0b5b      	lsrs	r3, r3, #13
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004364:	0b1b      	lsrs	r3, r3, #12
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2200      	movs	r2, #0
 8004376:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	d163      	bne.n	8004448 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004384:	009a      	lsls	r2, r3, #2
 8004386:	f640 73fc 	movw	r3, #4092	; 0xffc
 800438a:	4013      	ands	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004390:	0f92      	lsrs	r2, r2, #30
 8004392:	431a      	orrs	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439c:	0edb      	lsrs	r3, r3, #27
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ae:	0e1b      	lsrs	r3, r3, #24
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	0d5b      	lsrs	r3, r3, #21
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e4:	0bdb      	lsrs	r3, r3, #15
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7e1b      	ldrb	r3, [r3, #24]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	3302      	adds	r3, #2
 8004408:	2201      	movs	r2, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004412:	fb02 f203 	mul.w	r2, r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	7a1b      	ldrb	r3, [r3, #8]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004434:	0a52      	lsrs	r2, r2, #9
 8004436:	fb02 f203 	mul.w	r2, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
 8004446:	e031      	b.n	80044ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11d      	bne.n	800448c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	3301      	adds	r3, #1
 800446c:	029a      	lsls	r2, r3, #10
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004480:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
 800448a:	e00f      	b.n	80044ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <HAL_SD_GetCardCSD+0x344>)
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e09d      	b.n	80045e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	0b9b      	lsrs	r3, r3, #14
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c2:	09db      	lsrs	r3, r3, #7
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	0fdb      	lsrs	r3, r3, #31
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	0f5b      	lsrs	r3, r3, #29
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	0e9b      	lsrs	r3, r3, #26
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b2da      	uxtb	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	0d9b      	lsrs	r3, r3, #22
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	0d5b      	lsrs	r3, r3, #21
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	0bdb      	lsrs	r3, r3, #15
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	0b9b      	lsrs	r3, r3, #14
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	0b1b      	lsrs	r3, r3, #12
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	004005ff 	.word	0x004005ff

080045f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b08e      	sub	sp, #56	; 0x38
 80045fc:	af04      	add	r7, sp, #16
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2203      	movs	r2, #3
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	2b03      	cmp	r3, #3
 8004610:	d02e      	beq.n	8004670 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d106      	bne.n	8004628 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
 8004626:	e029      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462e:	d10a      	bne.n	8004646 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9b9 	bl	80049a8 <SD_WideBus_Enable>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
 8004644:	e01a      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f9f6 	bl	8004a3e <SD_WideBus_Disable>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
 8004660:	e00c      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
 800466e:	e005      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	; (80046ec <HAL_SD_ConfigWideBusOperation+0xf4>)
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e024      	b.n	80046e2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	466c      	mov	r4, sp
 80046c0:	f107 0318 	add.w	r3, r7, #24
 80046c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d2:	4628      	mov	r0, r5
 80046d4:	f002 f8f6 	bl	80068c4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3728      	adds	r7, #40	; 0x28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	004005ff 	.word	0x004005ff

080046f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b094      	sub	sp, #80	; 0x50
 80046f4:	af04      	add	r7, sp, #16
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80046f8:	2301      	movs	r3, #1
 80046fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f002 f926 	bl	8006952 <SDIO_GetPowerState>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800470c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004710:	e0b7      	b.n	8004882 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	2b03      	cmp	r3, #3
 8004718:	d02f      	beq.n	800477a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f002 faa5 	bl	8006c6e <SDMMC_CmdSendCID>
 8004724:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <SD_InitCard+0x40>
    {
      return errorstate;
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	e0a8      	b.n	8004882 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f002 f950 	bl	80069dc <SDIO_GetResponse>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2104      	movs	r1, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f002 f947 	bl	80069dc <SDIO_GetResponse>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2108      	movs	r1, #8
 800475a:	4618      	mov	r0, r3
 800475c:	f002 f93e 	bl	80069dc <SDIO_GetResponse>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	210c      	movs	r1, #12
 800476c:	4618      	mov	r0, r3
 800476e:	f002 f935 	bl	80069dc <SDIO_GetResponse>
 8004772:	4602      	mov	r2, r0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	2b03      	cmp	r3, #3
 8004780:	d00d      	beq.n	800479e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f107 020e 	add.w	r2, r7, #14
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f002 faab 	bl	8006ce8 <SDMMC_CmdSetRelAdd>
 8004792:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <SD_InitCard+0xae>
    {
      return errorstate;
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	e071      	b.n	8004882 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d036      	beq.n	8004814 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80047a6:	89fb      	ldrh	r3, [r7, #14]
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	041b      	lsls	r3, r3, #16
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f002 fa75 	bl	8006caa <SDMMC_CmdSendCSD>
 80047c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	e05a      	b.n	8004882 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f002 f902 	bl	80069dc <SDIO_GetResponse>
 80047d8:	4602      	mov	r2, r0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2104      	movs	r1, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f002 f8f9 	bl	80069dc <SDIO_GetResponse>
 80047ea:	4602      	mov	r2, r0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2108      	movs	r1, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f002 f8f0 	bl	80069dc <SDIO_GetResponse>
 80047fc:	4602      	mov	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	210c      	movs	r1, #12
 8004808:	4618      	mov	r0, r3
 800480a:	f002 f8e7 	bl	80069dc <SDIO_GetResponse>
 800480e:	4602      	mov	r2, r0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2104      	movs	r1, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f002 f8de 	bl	80069dc <SDIO_GetResponse>
 8004820:	4603      	mov	r3, r0
 8004822:	0d1a      	lsrs	r2, r3, #20
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004828:	f107 0310 	add.w	r3, r7, #16
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fd3e 	bl	80042b0 <HAL_SD_GetCardCSD>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800483a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800483e:	e020      	b.n	8004882 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	f04f 0400 	mov.w	r4, #0
 800484e:	461a      	mov	r2, r3
 8004850:	4623      	mov	r3, r4
 8004852:	4608      	mov	r0, r1
 8004854:	f002 f923 	bl	8006a9e <SDMMC_CmdSelDesel>
 8004858:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <SD_InitCard+0x174>
  {
    return errorstate;
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	e00e      	b.n	8004882 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681d      	ldr	r5, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	466c      	mov	r4, sp
 800486c:	f103 0210 	add.w	r2, r3, #16
 8004870:	ca07      	ldmia	r2, {r0, r1, r2}
 8004872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004876:	3304      	adds	r3, #4
 8004878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800487a:	4628      	mov	r0, r5
 800487c:	f002 f822 	bl	80068c4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3740      	adds	r7, #64	; 0x40
 8004886:	46bd      	mov	sp, r7
 8004888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800488c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 f91d 	bl	8006ae4 <SDMMC_CmdGoIdleState>
 80048aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	e072      	b.n	800499c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 f930 	bl	8006b20 <SDMMC_CmdOperCond>
 80048c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f002 f906 	bl	8006ae4 <SDMMC_CmdGoIdleState>
 80048d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	e05b      	b.n	800499c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d137      	bne.n	8004962 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f002 f930 	bl	8006b5e <SDMMC_CmdAppCommand>
 80048fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02d      	beq.n	8004962 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800490a:	e047      	b.n	800499c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f002 f923 	bl	8006b5e <SDMMC_CmdAppCommand>
 8004918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <SD_PowerON+0x98>
    {
      return errorstate;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	e03b      	b.n	800499c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	491e      	ldr	r1, [pc, #120]	; (80049a4 <SD_PowerON+0x118>)
 800492a:	4618      	mov	r0, r3
 800492c:	f002 f939 	bl	8006ba2 <SDMMC_CmdAppOperCommand>
 8004930:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800493c:	e02e      	b.n	800499c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f002 f849 	bl	80069dc <SDIO_GetResponse>
 800494a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	0fdb      	lsrs	r3, r3, #31
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <SD_PowerON+0xcc>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <SD_PowerON+0xce>
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]

    count++;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004968:	4293      	cmp	r3, r2
 800496a:	d802      	bhi.n	8004972 <SD_PowerON+0xe6>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0cc      	beq.n	800490c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004978:	4293      	cmp	r3, r2
 800497a:	d902      	bls.n	8004982 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800497c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004980:	e00c      	b.n	800499c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
 8004992:	e002      	b.n	800499a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	c1100000 	.word	0xc1100000

080049a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f002 f80c 	bl	80069dc <SDIO_GetResponse>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ce:	d102      	bne.n	80049d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049d4:	e02f      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f879 	bl	8004ad4 <SD_FindSCR>
 80049e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	e023      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01c      	beq.n	8004a32 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f002 f8aa 	bl	8006b5e <SDMMC_CmdAppCommand>
 8004a0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	e00f      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f002 f8e3 	bl	8006be8 <SDMMC_CmdBusWidth>
 8004a22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	e003      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e001      	b.n	8004a36 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 ffc1 	bl	80069dc <SDIO_GetResponse>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a64:	d102      	bne.n	8004a6c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a6a:	e02f      	b.n	8004acc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f82e 	bl	8004ad4 <SD_FindSCR>
 8004a78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	e023      	b.n	8004acc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01c      	beq.n	8004ac8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f002 f85f 	bl	8006b5e <SDMMC_CmdAppCommand>
 8004aa0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	e00f      	b.n	8004acc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 f898 	bl	8006be8 <SDMMC_CmdBusWidth>
 8004ab8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	e003      	b.n	8004acc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e001      	b.n	8004acc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ac8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b08f      	sub	sp, #60	; 0x3c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ade:	f7fc fcf1 	bl	80014c4 <HAL_GetTick>
 8004ae2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2108      	movs	r1, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 ffad 	bl	8006a5a <SDMMC_CmdBlockLength>
 8004b00:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	e0a9      	b.n	8004c60 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f002 f820 	bl	8006b5e <SDMMC_CmdAppCommand>
 8004b1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	e09a      	b.n	8004c60 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004b30:	2308      	movs	r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004b34:	2330      	movs	r3, #48	; 0x30
 8004b36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f107 0210 	add.w	r2, r7, #16
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 ff57 	bl	8006a02 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f002 f867 	bl	8006c2c <SDMMC_CmdSendSCR>
 8004b5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d022      	beq.n	8004bac <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	e07a      	b.n	8004c60 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f107 0208 	add.w	r2, r7, #8
 8004b84:	18d4      	adds	r4, r2, r3
 8004b86:	4608      	mov	r0, r1
 8004b88:	f001 fec7 	bl	800691a <SDIO_ReadFIFO>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	6023      	str	r3, [r4, #0]
      index++;
 8004b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b92:	3301      	adds	r3, #1
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b96:	f7fc fc95 	bl	80014c4 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d102      	bne.n	8004bac <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004baa:	e059      	b.n	8004c60 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb2:	f240 432a 	movw	r3, #1066	; 0x42a
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0d6      	beq.n	8004b6a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2208      	movs	r2, #8
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	e044      	b.n	8004c60 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2202      	movs	r2, #2
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bec:	2302      	movs	r3, #2
 8004bee:	e037      	b.n	8004c60 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2220      	movs	r2, #32
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e02a      	b.n	8004c60 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	061a      	lsls	r2, r3, #24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	0e1b      	lsrs	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	601a      	str	r2, [r3, #0]
    scr++;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	3304      	adds	r3, #4
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	061a      	lsls	r2, r3, #24
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	0e1b      	lsrs	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	373c      	adds	r7, #60	; 0x3c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd90      	pop	{r4, r7, pc}

08004c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e056      	b.n	8004d28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc f94d 	bl	8000f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	f003 0104 	and.w	r1, r3, #4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e034      	b.n	8004db0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7fc fa5e 	bl	800121c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3308      	adds	r3, #8
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f001 fcda 	bl	8006724 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	f001 fd24 	bl	80067c8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6858      	ldr	r0, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	f001 fd59 	bl	8006844 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6892      	ldr	r2, [r2, #8]
 8004da6:	f041 0101 	orr.w	r1, r1, #1
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e01d      	b.n	8004e06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f924 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f000 fb10 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b06      	cmp	r3, #6
 8004e36:	d007      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e01d      	b.n	8004ea4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f815 	bl	8004eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 fac1 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0202 	mvn.w	r2, #2
 8004eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa6b 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa5d 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa6e 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0204 	mvn.w	r2, #4
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa41 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa33 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa44 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0208 	mvn.w	r2, #8
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2204      	movs	r2, #4
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa17 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa09 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa1a 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0210 	mvn.w	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2208      	movs	r2, #8
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f9ed 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f9df 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9f0 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0201 	mvn.w	r2, #1
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fb fe2c 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d10e      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d107      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fd46 	bl	8005afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d10e      	bne.n	800509c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d107      	bne.n	800509c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f9b5 	bl	8005406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0220 	mvn.w	r2, #32
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fd10 	bl	8005ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e0b4      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	f200 809f 	bhi.w	8005240 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800513d 	.word	0x0800513d
 800510c:	08005241 	.word	0x08005241
 8005110:	08005241 	.word	0x08005241
 8005114:	08005241 	.word	0x08005241
 8005118:	0800517d 	.word	0x0800517d
 800511c:	08005241 	.word	0x08005241
 8005120:	08005241 	.word	0x08005241
 8005124:	08005241 	.word	0x08005241
 8005128:	080051bf 	.word	0x080051bf
 800512c:	08005241 	.word	0x08005241
 8005130:	08005241 	.word	0x08005241
 8005134:	08005241 	.word	0x08005241
 8005138:	080051ff 	.word	0x080051ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fa0a 	bl	800555c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6999      	ldr	r1, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
      break;
 800517a:	e062      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa5a 	bl	800563c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]
      break;
 80051bc:	e041      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 faaf 	bl	8005728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0204 	bic.w	r2, r2, #4
 80051e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69d9      	ldr	r1, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	61da      	str	r2, [r3, #28]
      break;
 80051fc:	e021      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fb03 	bl	8005810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005240:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIM_ConfigClockSource+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e0a6      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x166>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d067      	beq.n	800537c <HAL_TIM_ConfigClockSource+0x120>
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d80b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x6c>
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d073      	beq.n	800539c <HAL_TIM_ConfigClockSource+0x140>
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d802      	bhi.n	80052be <HAL_TIM_ConfigClockSource+0x62>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d06f      	beq.n	800539c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052bc:	e078      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d06c      	beq.n	800539c <HAL_TIM_ConfigClockSource+0x140>
 80052c2:	2b30      	cmp	r3, #48	; 0x30
 80052c4:	d06a      	beq.n	800539c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80052c6:	e073      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052c8:	2b70      	cmp	r3, #112	; 0x70
 80052ca:	d00d      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0x8c>
 80052cc:	2b70      	cmp	r3, #112	; 0x70
 80052ce:	d804      	bhi.n	80052da <HAL_TIM_ConfigClockSource+0x7e>
 80052d0:	2b50      	cmp	r3, #80	; 0x50
 80052d2:	d033      	beq.n	800533c <HAL_TIM_ConfigClockSource+0xe0>
 80052d4:	2b60      	cmp	r3, #96	; 0x60
 80052d6:	d041      	beq.n	800535c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80052d8:	e06a      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	d066      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x152>
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d017      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80052e6:	e063      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6899      	ldr	r1, [r3, #8]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f000 fb5a 	bl	80059b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800530a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e04c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6899      	ldr	r1, [r3, #8]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f000 fb43 	bl	80059b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005338:	609a      	str	r2, [r3, #8]
      break;
 800533a:	e039      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	461a      	mov	r2, r3
 800534a:	f000 fab7 	bl	80058bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2150      	movs	r1, #80	; 0x50
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fb10 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 800535a:	e029      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	461a      	mov	r2, r3
 800536a:	f000 fad6 	bl	800591a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2160      	movs	r1, #96	; 0x60
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fb00 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 800537a:	e019      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	461a      	mov	r2, r3
 800538a:	f000 fa97 	bl	80058bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	4618      	mov	r0, r3
 8005396:	f000 faf0 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 800539a:	e009      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f000 fae7 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 80053ac:	e000      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a40      	ldr	r2, [pc, #256]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d00f      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3d      	ldr	r2, [pc, #244]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00b      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d007      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3b      	ldr	r2, [pc, #236]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d108      	bne.n	800546e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d027      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d023      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <TIM_Base_SetConfig+0x124>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_Base_SetConfig+0x128>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_Base_SetConfig+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_Base_SetConfig+0x130>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_Base_SetConfig+0x134>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <TIM_Base_SetConfig+0x138>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <TIM_Base_SetConfig+0x13c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d103      	bne.n	800551c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	40001800 	.word	0x40001800
 8005554:	40001c00 	.word	0x40001c00
 8005558:	40002000 	.word	0x40002000

0800555c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0302 	bic.w	r3, r3, #2
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a20      	ldr	r2, [pc, #128]	; (8005634 <TIM_OC1_SetConfig+0xd8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC1_SetConfig+0x64>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <TIM_OC1_SetConfig+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0308 	bic.w	r3, r3, #8
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <TIM_OC1_SetConfig+0xd8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC1_SetConfig+0x8e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <TIM_OC1_SetConfig+0xdc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d111      	bne.n	800560e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC2_SetConfig+0x68>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x94>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a16      	ldr	r2, [pc, #88]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400

08005728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a21      	ldr	r2, [pc, #132]	; (8005808 <TIM_OC3_SetConfig+0xe0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC3_SetConfig+0x66>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a20      	ldr	r2, [pc, #128]	; (800580c <TIM_OC3_SetConfig+0xe4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10d      	bne.n	80057aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <TIM_OC3_SetConfig+0xe0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_OC3_SetConfig+0x92>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <TIM_OC3_SetConfig+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d113      	bne.n	80057e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_OC4_SetConfig+0xa4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC4_SetConfig+0x68>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <TIM_OC4_SetConfig+0xa8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d109      	bne.n	800588c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	019b      	lsls	r3, r3, #6
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40010400 	.word	0x40010400

080058bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 030a 	bic.w	r3, r3, #10
 80058f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 0307 	orr.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e05a      	b.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d01d      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a18      	ldr	r2, [pc, #96]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10c      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40010400 	.word	0x40010400
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40001800 	.word	0x40001800

08005ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e03f      	b.n	8005ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb fad4 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fa69 	bl	800602c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_UART_IRQHandler+0x52>
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f996 	bl	8005f28 <UART_Receive_IT>
      return;
 8005bfc:	e0d1      	b.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b0 	beq.w	8005d66 <HAL_UART_IRQHandler+0x1ba>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_UART_IRQHandler+0x70>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a5 	beq.w	8005d66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_UART_IRQHandler+0x90>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_UART_IRQHandler+0xb0>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_UART_IRQHandler+0xd0>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xfa>
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_UART_IRQHandler+0xee>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	f043 0208 	orr.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d078      	beq.n	8005da0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f930 	bl	8005f28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x144>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d031      	beq.n	8005d54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f879 	bl	8005de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d123      	bne.n	8005d4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <HAL_UART_IRQHandler+0x1fc>)
 8005d22:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fb ff3d 	bl	8001ba8 <HAL_DMA_Abort_IT>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d42:	e00e      	b.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f845 	bl	8005dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4a:	e00a      	b.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f841 	bl	8005dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	e006      	b.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f83d 	bl	8005dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d60:	e01e      	b.n	8005da0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d62:	bf00      	nop
    return;
 8005d64:	e01c      	b.n	8005da0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1d6>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f866 	bl	8005e4c <UART_Transmit_IT>
    return;
 8005d80:	e00f      	b.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8ae 	bl	8005ef8 <UART_EndTransmit_IT>
    return;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005da0:	bf00      	nop
  }
}
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	08005e25 	.word	0x08005e25

08005dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dfe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff ffc8 	bl	8005dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b21      	cmp	r3, #33	; 0x21
 8005e5e:	d144      	bne.n	8005eea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e68:	d11a      	bne.n	8005ea0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e7e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]
 8005e92:	e00e      	b.n	8005eb2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]
 8005e9e:	e008      	b.n	8005eb2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6211      	str	r1, [r2, #32]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10f      	bne.n	8005ee6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff47 	bl	8005dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b22      	cmp	r3, #34	; 0x22
 8005f3a:	d171      	bne.n	8006020 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f44:	d123      	bne.n	8005f8e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10e      	bne.n	8005f72 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f70:	e029      	b.n	8005fc6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f8c:	e01b      	b.n	8005fc6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6858      	ldr	r0, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6291      	str	r1, [r2, #40]	; 0x28
 8005fa6:	b2c2      	uxtb	r2, r0
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e00c      	b.n	8005fc6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	1c58      	adds	r0, r3, #1
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	6288      	str	r0, [r1, #40]	; 0x28
 8005fbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d120      	bne.n	800601c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0220 	bic.w	r2, r2, #32
 8005fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fed4 	bl	8005dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e002      	b.n	8006022 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800606e:	f023 030c 	bic.w	r3, r3, #12
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	430b      	orrs	r3, r1
 800607a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609a:	f040 818b 	bne.w	80063b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4ac1      	ldr	r2, [pc, #772]	; (80063a8 <UART_SetConfig+0x37c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d005      	beq.n	80060b4 <UART_SetConfig+0x88>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4abf      	ldr	r2, [pc, #764]	; (80063ac <UART_SetConfig+0x380>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	f040 80bd 	bne.w	800622e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b4:	f7fd fe5e 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 80060b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	461d      	mov	r5, r3
 80060be:	f04f 0600 	mov.w	r6, #0
 80060c2:	46a8      	mov	r8, r5
 80060c4:	46b1      	mov	r9, r6
 80060c6:	eb18 0308 	adds.w	r3, r8, r8
 80060ca:	eb49 0409 	adc.w	r4, r9, r9
 80060ce:	4698      	mov	r8, r3
 80060d0:	46a1      	mov	r9, r4
 80060d2:	eb18 0805 	adds.w	r8, r8, r5
 80060d6:	eb49 0906 	adc.w	r9, r9, r6
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060ee:	4688      	mov	r8, r1
 80060f0:	4691      	mov	r9, r2
 80060f2:	eb18 0005 	adds.w	r0, r8, r5
 80060f6:	eb49 0106 	adc.w	r1, r9, r6
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	461d      	mov	r5, r3
 8006100:	f04f 0600 	mov.w	r6, #0
 8006104:	196b      	adds	r3, r5, r5
 8006106:	eb46 0406 	adc.w	r4, r6, r6
 800610a:	461a      	mov	r2, r3
 800610c:	4623      	mov	r3, r4
 800610e:	f7fa f85b 	bl	80001c8 <__aeabi_uldivmod>
 8006112:	4603      	mov	r3, r0
 8006114:	460c      	mov	r4, r1
 8006116:	461a      	mov	r2, r3
 8006118:	4ba5      	ldr	r3, [pc, #660]	; (80063b0 <UART_SetConfig+0x384>)
 800611a:	fba3 2302 	umull	r2, r3, r3, r2
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	461d      	mov	r5, r3
 8006128:	f04f 0600 	mov.w	r6, #0
 800612c:	46a9      	mov	r9, r5
 800612e:	46b2      	mov	sl, r6
 8006130:	eb19 0309 	adds.w	r3, r9, r9
 8006134:	eb4a 040a 	adc.w	r4, sl, sl
 8006138:	4699      	mov	r9, r3
 800613a:	46a2      	mov	sl, r4
 800613c:	eb19 0905 	adds.w	r9, r9, r5
 8006140:	eb4a 0a06 	adc.w	sl, sl, r6
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006150:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006154:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006158:	4689      	mov	r9, r1
 800615a:	4692      	mov	sl, r2
 800615c:	eb19 0005 	adds.w	r0, r9, r5
 8006160:	eb4a 0106 	adc.w	r1, sl, r6
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	461d      	mov	r5, r3
 800616a:	f04f 0600 	mov.w	r6, #0
 800616e:	196b      	adds	r3, r5, r5
 8006170:	eb46 0406 	adc.w	r4, r6, r6
 8006174:	461a      	mov	r2, r3
 8006176:	4623      	mov	r3, r4
 8006178:	f7fa f826 	bl	80001c8 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	461a      	mov	r2, r3
 8006182:	4b8b      	ldr	r3, [pc, #556]	; (80063b0 <UART_SetConfig+0x384>)
 8006184:	fba3 1302 	umull	r1, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	2164      	movs	r1, #100	; 0x64
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	3332      	adds	r3, #50	; 0x32
 8006196:	4a86      	ldr	r2, [pc, #536]	; (80063b0 <UART_SetConfig+0x384>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a4:	4498      	add	r8, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	461d      	mov	r5, r3
 80061aa:	f04f 0600 	mov.w	r6, #0
 80061ae:	46a9      	mov	r9, r5
 80061b0:	46b2      	mov	sl, r6
 80061b2:	eb19 0309 	adds.w	r3, r9, r9
 80061b6:	eb4a 040a 	adc.w	r4, sl, sl
 80061ba:	4699      	mov	r9, r3
 80061bc:	46a2      	mov	sl, r4
 80061be:	eb19 0905 	adds.w	r9, r9, r5
 80061c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80061c6:	f04f 0100 	mov.w	r1, #0
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061da:	4689      	mov	r9, r1
 80061dc:	4692      	mov	sl, r2
 80061de:	eb19 0005 	adds.w	r0, r9, r5
 80061e2:	eb4a 0106 	adc.w	r1, sl, r6
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	461d      	mov	r5, r3
 80061ec:	f04f 0600 	mov.w	r6, #0
 80061f0:	196b      	adds	r3, r5, r5
 80061f2:	eb46 0406 	adc.w	r4, r6, r6
 80061f6:	461a      	mov	r2, r3
 80061f8:	4623      	mov	r3, r4
 80061fa:	f7f9 ffe5 	bl	80001c8 <__aeabi_uldivmod>
 80061fe:	4603      	mov	r3, r0
 8006200:	460c      	mov	r4, r1
 8006202:	461a      	mov	r2, r3
 8006204:	4b6a      	ldr	r3, [pc, #424]	; (80063b0 <UART_SetConfig+0x384>)
 8006206:	fba3 1302 	umull	r1, r3, r3, r2
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	2164      	movs	r1, #100	; 0x64
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	3332      	adds	r3, #50	; 0x32
 8006218:	4a65      	ldr	r2, [pc, #404]	; (80063b0 <UART_SetConfig+0x384>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	f003 0207 	and.w	r2, r3, #7
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4442      	add	r2, r8
 800622a:	609a      	str	r2, [r3, #8]
 800622c:	e26f      	b.n	800670e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800622e:	f7fd fd8d 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8006232:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	461d      	mov	r5, r3
 8006238:	f04f 0600 	mov.w	r6, #0
 800623c:	46a8      	mov	r8, r5
 800623e:	46b1      	mov	r9, r6
 8006240:	eb18 0308 	adds.w	r3, r8, r8
 8006244:	eb49 0409 	adc.w	r4, r9, r9
 8006248:	4698      	mov	r8, r3
 800624a:	46a1      	mov	r9, r4
 800624c:	eb18 0805 	adds.w	r8, r8, r5
 8006250:	eb49 0906 	adc.w	r9, r9, r6
 8006254:	f04f 0100 	mov.w	r1, #0
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006260:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006264:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006268:	4688      	mov	r8, r1
 800626a:	4691      	mov	r9, r2
 800626c:	eb18 0005 	adds.w	r0, r8, r5
 8006270:	eb49 0106 	adc.w	r1, r9, r6
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	461d      	mov	r5, r3
 800627a:	f04f 0600 	mov.w	r6, #0
 800627e:	196b      	adds	r3, r5, r5
 8006280:	eb46 0406 	adc.w	r4, r6, r6
 8006284:	461a      	mov	r2, r3
 8006286:	4623      	mov	r3, r4
 8006288:	f7f9 ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800628c:	4603      	mov	r3, r0
 800628e:	460c      	mov	r4, r1
 8006290:	461a      	mov	r2, r3
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <UART_SetConfig+0x384>)
 8006294:	fba3 2302 	umull	r2, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	461d      	mov	r5, r3
 80062a2:	f04f 0600 	mov.w	r6, #0
 80062a6:	46a9      	mov	r9, r5
 80062a8:	46b2      	mov	sl, r6
 80062aa:	eb19 0309 	adds.w	r3, r9, r9
 80062ae:	eb4a 040a 	adc.w	r4, sl, sl
 80062b2:	4699      	mov	r9, r3
 80062b4:	46a2      	mov	sl, r4
 80062b6:	eb19 0905 	adds.w	r9, r9, r5
 80062ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80062be:	f04f 0100 	mov.w	r1, #0
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062d2:	4689      	mov	r9, r1
 80062d4:	4692      	mov	sl, r2
 80062d6:	eb19 0005 	adds.w	r0, r9, r5
 80062da:	eb4a 0106 	adc.w	r1, sl, r6
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	461d      	mov	r5, r3
 80062e4:	f04f 0600 	mov.w	r6, #0
 80062e8:	196b      	adds	r3, r5, r5
 80062ea:	eb46 0406 	adc.w	r4, r6, r6
 80062ee:	461a      	mov	r2, r3
 80062f0:	4623      	mov	r3, r4
 80062f2:	f7f9 ff69 	bl	80001c8 <__aeabi_uldivmod>
 80062f6:	4603      	mov	r3, r0
 80062f8:	460c      	mov	r4, r1
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <UART_SetConfig+0x384>)
 80062fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2164      	movs	r1, #100	; 0x64
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	3332      	adds	r3, #50	; 0x32
 8006310:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <UART_SetConfig+0x384>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800631e:	4498      	add	r8, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	461d      	mov	r5, r3
 8006324:	f04f 0600 	mov.w	r6, #0
 8006328:	46a9      	mov	r9, r5
 800632a:	46b2      	mov	sl, r6
 800632c:	eb19 0309 	adds.w	r3, r9, r9
 8006330:	eb4a 040a 	adc.w	r4, sl, sl
 8006334:	4699      	mov	r9, r3
 8006336:	46a2      	mov	sl, r4
 8006338:	eb19 0905 	adds.w	r9, r9, r5
 800633c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800634c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006354:	4689      	mov	r9, r1
 8006356:	4692      	mov	sl, r2
 8006358:	eb19 0005 	adds.w	r0, r9, r5
 800635c:	eb4a 0106 	adc.w	r1, sl, r6
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	461d      	mov	r5, r3
 8006366:	f04f 0600 	mov.w	r6, #0
 800636a:	196b      	adds	r3, r5, r5
 800636c:	eb46 0406 	adc.w	r4, r6, r6
 8006370:	461a      	mov	r2, r3
 8006372:	4623      	mov	r3, r4
 8006374:	f7f9 ff28 	bl	80001c8 <__aeabi_uldivmod>
 8006378:	4603      	mov	r3, r0
 800637a:	460c      	mov	r4, r1
 800637c:	461a      	mov	r2, r3
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <UART_SetConfig+0x384>)
 8006380:	fba3 1302 	umull	r1, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	2164      	movs	r1, #100	; 0x64
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	3332      	adds	r3, #50	; 0x32
 8006392:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <UART_SetConfig+0x384>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	f003 0207 	and.w	r2, r3, #7
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4442      	add	r2, r8
 80063a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80063a6:	e1b2      	b.n	800670e <UART_SetConfig+0x6e2>
 80063a8:	40011000 	.word	0x40011000
 80063ac:	40011400 	.word	0x40011400
 80063b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4ad7      	ldr	r2, [pc, #860]	; (8006718 <UART_SetConfig+0x6ec>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d005      	beq.n	80063ca <UART_SetConfig+0x39e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4ad6      	ldr	r2, [pc, #856]	; (800671c <UART_SetConfig+0x6f0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	f040 80d1 	bne.w	800656c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063ca:	f7fd fcd3 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 80063ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	469a      	mov	sl, r3
 80063d4:	f04f 0b00 	mov.w	fp, #0
 80063d8:	46d0      	mov	r8, sl
 80063da:	46d9      	mov	r9, fp
 80063dc:	eb18 0308 	adds.w	r3, r8, r8
 80063e0:	eb49 0409 	adc.w	r4, r9, r9
 80063e4:	4698      	mov	r8, r3
 80063e6:	46a1      	mov	r9, r4
 80063e8:	eb18 080a 	adds.w	r8, r8, sl
 80063ec:	eb49 090b 	adc.w	r9, r9, fp
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006400:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006404:	4688      	mov	r8, r1
 8006406:	4691      	mov	r9, r2
 8006408:	eb1a 0508 	adds.w	r5, sl, r8
 800640c:	eb4b 0609 	adc.w	r6, fp, r9
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4619      	mov	r1, r3
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	f04f 0400 	mov.w	r4, #0
 8006422:	0094      	lsls	r4, r2, #2
 8006424:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006428:	008b      	lsls	r3, r1, #2
 800642a:	461a      	mov	r2, r3
 800642c:	4623      	mov	r3, r4
 800642e:	4628      	mov	r0, r5
 8006430:	4631      	mov	r1, r6
 8006432:	f7f9 fec9 	bl	80001c8 <__aeabi_uldivmod>
 8006436:	4603      	mov	r3, r0
 8006438:	460c      	mov	r4, r1
 800643a:	461a      	mov	r2, r3
 800643c:	4bb8      	ldr	r3, [pc, #736]	; (8006720 <UART_SetConfig+0x6f4>)
 800643e:	fba3 2302 	umull	r2, r3, r3, r2
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	469b      	mov	fp, r3
 800644c:	f04f 0c00 	mov.w	ip, #0
 8006450:	46d9      	mov	r9, fp
 8006452:	46e2      	mov	sl, ip
 8006454:	eb19 0309 	adds.w	r3, r9, r9
 8006458:	eb4a 040a 	adc.w	r4, sl, sl
 800645c:	4699      	mov	r9, r3
 800645e:	46a2      	mov	sl, r4
 8006460:	eb19 090b 	adds.w	r9, r9, fp
 8006464:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006468:	f04f 0100 	mov.w	r1, #0
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006474:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006478:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800647c:	4689      	mov	r9, r1
 800647e:	4692      	mov	sl, r2
 8006480:	eb1b 0509 	adds.w	r5, fp, r9
 8006484:	eb4c 060a 	adc.w	r6, ip, sl
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4619      	mov	r1, r3
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	f04f 0400 	mov.w	r4, #0
 800649a:	0094      	lsls	r4, r2, #2
 800649c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064a0:	008b      	lsls	r3, r1, #2
 80064a2:	461a      	mov	r2, r3
 80064a4:	4623      	mov	r3, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	4631      	mov	r1, r6
 80064aa:	f7f9 fe8d 	bl	80001c8 <__aeabi_uldivmod>
 80064ae:	4603      	mov	r3, r0
 80064b0:	460c      	mov	r4, r1
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b9a      	ldr	r3, [pc, #616]	; (8006720 <UART_SetConfig+0x6f4>)
 80064b6:	fba3 1302 	umull	r1, r3, r3, r2
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2164      	movs	r1, #100	; 0x64
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	3332      	adds	r3, #50	; 0x32
 80064c8:	4a95      	ldr	r2, [pc, #596]	; (8006720 <UART_SetConfig+0x6f4>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d4:	4498      	add	r8, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	469b      	mov	fp, r3
 80064da:	f04f 0c00 	mov.w	ip, #0
 80064de:	46d9      	mov	r9, fp
 80064e0:	46e2      	mov	sl, ip
 80064e2:	eb19 0309 	adds.w	r3, r9, r9
 80064e6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ea:	4699      	mov	r9, r3
 80064ec:	46a2      	mov	sl, r4
 80064ee:	eb19 090b 	adds.w	r9, r9, fp
 80064f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006502:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006506:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800650a:	4689      	mov	r9, r1
 800650c:	4692      	mov	sl, r2
 800650e:	eb1b 0509 	adds.w	r5, fp, r9
 8006512:	eb4c 060a 	adc.w	r6, ip, sl
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4619      	mov	r1, r3
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	f04f 0400 	mov.w	r4, #0
 8006528:	0094      	lsls	r4, r2, #2
 800652a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800652e:	008b      	lsls	r3, r1, #2
 8006530:	461a      	mov	r2, r3
 8006532:	4623      	mov	r3, r4
 8006534:	4628      	mov	r0, r5
 8006536:	4631      	mov	r1, r6
 8006538:	f7f9 fe46 	bl	80001c8 <__aeabi_uldivmod>
 800653c:	4603      	mov	r3, r0
 800653e:	460c      	mov	r4, r1
 8006540:	461a      	mov	r2, r3
 8006542:	4b77      	ldr	r3, [pc, #476]	; (8006720 <UART_SetConfig+0x6f4>)
 8006544:	fba3 1302 	umull	r1, r3, r3, r2
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	2164      	movs	r1, #100	; 0x64
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	3332      	adds	r3, #50	; 0x32
 8006556:	4a72      	ldr	r2, [pc, #456]	; (8006720 <UART_SetConfig+0x6f4>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f003 020f 	and.w	r2, r3, #15
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4442      	add	r2, r8
 8006568:	609a      	str	r2, [r3, #8]
 800656a:	e0d0      	b.n	800670e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fd fbee 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8006570:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	469a      	mov	sl, r3
 8006576:	f04f 0b00 	mov.w	fp, #0
 800657a:	46d0      	mov	r8, sl
 800657c:	46d9      	mov	r9, fp
 800657e:	eb18 0308 	adds.w	r3, r8, r8
 8006582:	eb49 0409 	adc.w	r4, r9, r9
 8006586:	4698      	mov	r8, r3
 8006588:	46a1      	mov	r9, r4
 800658a:	eb18 080a 	adds.w	r8, r8, sl
 800658e:	eb49 090b 	adc.w	r9, r9, fp
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800659e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065a6:	4688      	mov	r8, r1
 80065a8:	4691      	mov	r9, r2
 80065aa:	eb1a 0508 	adds.w	r5, sl, r8
 80065ae:	eb4b 0609 	adc.w	r6, fp, r9
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4619      	mov	r1, r3
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	f04f 0400 	mov.w	r4, #0
 80065c4:	0094      	lsls	r4, r2, #2
 80065c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065ca:	008b      	lsls	r3, r1, #2
 80065cc:	461a      	mov	r2, r3
 80065ce:	4623      	mov	r3, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	4631      	mov	r1, r6
 80065d4:	f7f9 fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80065d8:	4603      	mov	r3, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	461a      	mov	r2, r3
 80065de:	4b50      	ldr	r3, [pc, #320]	; (8006720 <UART_SetConfig+0x6f4>)
 80065e0:	fba3 2302 	umull	r2, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	469b      	mov	fp, r3
 80065ee:	f04f 0c00 	mov.w	ip, #0
 80065f2:	46d9      	mov	r9, fp
 80065f4:	46e2      	mov	sl, ip
 80065f6:	eb19 0309 	adds.w	r3, r9, r9
 80065fa:	eb4a 040a 	adc.w	r4, sl, sl
 80065fe:	4699      	mov	r9, r3
 8006600:	46a2      	mov	sl, r4
 8006602:	eb19 090b 	adds.w	r9, r9, fp
 8006606:	eb4a 0a0c 	adc.w	sl, sl, ip
 800660a:	f04f 0100 	mov.w	r1, #0
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006616:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800661a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800661e:	4689      	mov	r9, r1
 8006620:	4692      	mov	sl, r2
 8006622:	eb1b 0509 	adds.w	r5, fp, r9
 8006626:	eb4c 060a 	adc.w	r6, ip, sl
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4619      	mov	r1, r3
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	f04f 0400 	mov.w	r4, #0
 800663c:	0094      	lsls	r4, r2, #2
 800663e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006642:	008b      	lsls	r3, r1, #2
 8006644:	461a      	mov	r2, r3
 8006646:	4623      	mov	r3, r4
 8006648:	4628      	mov	r0, r5
 800664a:	4631      	mov	r1, r6
 800664c:	f7f9 fdbc 	bl	80001c8 <__aeabi_uldivmod>
 8006650:	4603      	mov	r3, r0
 8006652:	460c      	mov	r4, r1
 8006654:	461a      	mov	r2, r3
 8006656:	4b32      	ldr	r3, [pc, #200]	; (8006720 <UART_SetConfig+0x6f4>)
 8006658:	fba3 1302 	umull	r1, r3, r3, r2
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	2164      	movs	r1, #100	; 0x64
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	3332      	adds	r3, #50	; 0x32
 800666a:	4a2d      	ldr	r2, [pc, #180]	; (8006720 <UART_SetConfig+0x6f4>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006676:	4498      	add	r8, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	469b      	mov	fp, r3
 800667c:	f04f 0c00 	mov.w	ip, #0
 8006680:	46d9      	mov	r9, fp
 8006682:	46e2      	mov	sl, ip
 8006684:	eb19 0309 	adds.w	r3, r9, r9
 8006688:	eb4a 040a 	adc.w	r4, sl, sl
 800668c:	4699      	mov	r9, r3
 800668e:	46a2      	mov	sl, r4
 8006690:	eb19 090b 	adds.w	r9, r9, fp
 8006694:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066ac:	4689      	mov	r9, r1
 80066ae:	4692      	mov	sl, r2
 80066b0:	eb1b 0509 	adds.w	r5, fp, r9
 80066b4:	eb4c 060a 	adc.w	r6, ip, sl
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4619      	mov	r1, r3
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	f04f 0400 	mov.w	r4, #0
 80066ca:	0094      	lsls	r4, r2, #2
 80066cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066d0:	008b      	lsls	r3, r1, #2
 80066d2:	461a      	mov	r2, r3
 80066d4:	4623      	mov	r3, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	4631      	mov	r1, r6
 80066da:	f7f9 fd75 	bl	80001c8 <__aeabi_uldivmod>
 80066de:	4603      	mov	r3, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	461a      	mov	r2, r3
 80066e4:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <UART_SetConfig+0x6f4>)
 80066e6:	fba3 1302 	umull	r1, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	2164      	movs	r1, #100	; 0x64
 80066ee:	fb01 f303 	mul.w	r3, r1, r3
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	3332      	adds	r3, #50	; 0x32
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <UART_SetConfig+0x6f4>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4442      	add	r2, r8
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	e7ff      	b.n	800670e <UART_SetConfig+0x6e2>
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	40011000 	.word	0x40011000
 800671c:	40011400 	.word	0x40011400
 8006720:	51eb851f 	.word	0x51eb851f

08006724 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <FSMC_NORSRAM_Init+0xa0>)
 8006742:	4013      	ands	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800674e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006754:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800675a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006760:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006766:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800676c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006772:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006778:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800677e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006784:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800678a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006790:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d103      	bne.n	80067a8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	fff00080 	.word	0xfff00080

080067c8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80067ea:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80067f6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80067fe:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006806:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	3b01      	subs	r3, #1
 800680e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006810:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	3b02      	subs	r3, #2
 8006818:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800681a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006820:	4313      	orrs	r3, r2
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6979      	ldr	r1, [r7, #20]
 8006830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800685c:	d122      	bne.n	80068a4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800686c:	4013      	ands	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800687a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006882:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800688a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006890:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6979      	ldr	r1, [r7, #20]
 800689e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068a2:	e005      	b.n	80068b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80068ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	cff00000 	.word	0xcff00000

080068c4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80068c4:	b084      	sub	sp, #16
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	f107 001c 	add.w	r0, r7, #28
 80068d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80068da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80068dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80068de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80068e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80068e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80068ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80068ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80068fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	b004      	add	sp, #16
 8006918:	4770      	bx	lr

0800691a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2203      	movs	r2, #3
 8006940:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006942:	2002      	movs	r0, #2
 8006944:	f7fa fdca 	bl	80014dc <HAL_Delay>
  
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0303 	and.w	r3, r3, #3
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800698c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006992:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006998:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80069a8:	f023 030f 	bic.w	r3, r3, #15
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	b2db      	uxtb	r3, r3
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3314      	adds	r3, #20
 80069ea:	461a      	mov	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4413      	add	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
}  
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a28:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006a2e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006a34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0

}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b088      	sub	sp, #32
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a68:	2310      	movs	r3, #16
 8006a6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a6c:	2340      	movs	r3, #64	; 0x40
 8006a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ff74 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8a:	2110      	movs	r1, #16
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f975 	bl	8006d7c <SDMMC_GetCmdResp1>
 8006a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a94:	69fb      	ldr	r3, [r7, #28]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b08a      	sub	sp, #40	; 0x28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006aae:	2307      	movs	r3, #7
 8006ab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006abe:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ac0:	f107 0310 	add.w	r3, r7, #16
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff ff51 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad0:	2107      	movs	r1, #7
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f952 	bl	8006d7c <SDMMC_GetCmdResp1>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff30 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f90c 	bl	8006d2c <SDMMC_GetCmdError>
 8006b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b16:	69fb      	ldr	r3, [r7, #28]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b28:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b2e:	2308      	movs	r3, #8
 8006b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff11 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 faf5 	bl	800713c <SDMMC_GetCmdResp7>
 8006b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b54:	69fb      	ldr	r3, [r7, #28]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006b6c:	2337      	movs	r3, #55	; 0x37
 8006b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fef2 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8e:	2137      	movs	r1, #55	; 0x37
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f8f3 	bl	8006d7c <SDMMC_GetCmdResp1>
 8006b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b98:	69fb      	ldr	r3, [r7, #28]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006bb8:	2329      	movs	r3, #41	; 0x29
 8006bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bbc:	2340      	movs	r3, #64	; 0x40
 8006bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fecc 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa02 	bl	8006fe0 <SDMMC_GetCmdResp3>
 8006bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bde:	69fb      	ldr	r3, [r7, #28]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006bf6:	2306      	movs	r3, #6
 8006bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fead 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c18:	2106      	movs	r1, #6
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8ae 	bl	8006d7c <SDMMC_GetCmdResp1>
 8006c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c22:	69fb      	ldr	r3, [r7, #28]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006c38:	2333      	movs	r3, #51	; 0x33
 8006c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c4a:	f107 0308 	add.w	r3, r7, #8
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff fe8c 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5a:	2133      	movs	r1, #51	; 0x33
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f88d 	bl	8006d7c <SDMMC_GetCmdResp1>
 8006c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b088      	sub	sp, #32
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c7e:	23c0      	movs	r3, #192	; 0xc0
 8006c80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c82:	2300      	movs	r3, #0
 8006c84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c8c:	f107 0308 	add.w	r3, r7, #8
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fe6b 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f95b 	bl	8006f54 <SDMMC_GetCmdResp2>
 8006c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006cb8:	2309      	movs	r3, #9
 8006cba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006cbc:	23c0      	movs	r3, #192	; 0xc0
 8006cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cca:	f107 0308 	add.w	r3, r7, #8
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff fe4c 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f93c 	bl	8006f54 <SDMMC_GetCmdResp2>
 8006cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cde:	69fb      	ldr	r3, [r7, #28]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cfa:	2340      	movs	r3, #64	; 0x40
 8006cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d08:	f107 0308 	add.w	r3, r7, #8
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fe2d 	bl	800696e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	2103      	movs	r1, #3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f99b 	bl	8007054 <SDMMC_GetCmdResp6>
 8006d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d20:	69fb      	ldr	r3, [r7, #28]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006d2c:	b490      	push	{r4, r7}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <SDMMC_GetCmdError+0x48>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a0f      	ldr	r2, [pc, #60]	; (8006d78 <SDMMC_GetCmdError+0x4c>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	0a5b      	lsrs	r3, r3, #9
 8006d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d48:	4623      	mov	r3, r4
 8006d4a:	1e5c      	subs	r4, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d54:	e009      	b.n	8006d6a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0f2      	beq.n	8006d48 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	22c5      	movs	r2, #197	; 0xc5
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc90      	pop	{r4, r7}
 8006d72:	4770      	bx	lr
 8006d74:	20000000 	.word	0x20000000
 8006d78:	10624dd3 	.word	0x10624dd3

08006d7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	460b      	mov	r3, r1
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d8a:	4b6f      	ldr	r3, [pc, #444]	; (8006f48 <SDMMC_GetCmdResp1+0x1cc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6f      	ldr	r2, [pc, #444]	; (8006f4c <SDMMC_GetCmdResp1+0x1d0>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	0a5b      	lsrs	r3, r3, #9
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d9c:	4623      	mov	r3, r4
 8006d9e:	1e5c      	subs	r4, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006da4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006da8:	e0c9      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <SDMMC_GetCmdResp1+0x20>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1eb      	bne.n	8006d9c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dd6:	2304      	movs	r3, #4
 8006dd8:	e0b1      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0a6      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	22c5      	movs	r2, #197	; 0xc5
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff fde3 	bl	80069c2 <SDIO_GetCommandResponse>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d001      	beq.n	8006e0a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e099      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff fde5 	bl	80069dc <SDIO_GetResponse>
 8006e12:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4b4e      	ldr	r3, [pc, #312]	; (8006f50 <SDMMC_GetCmdResp1+0x1d4>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e08d      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da02      	bge.n	8006e2e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e2c:	e087      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	e080      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	e079      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e58:	e071      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e68:	e069      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e78:	e061      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e88:	e059      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e98:	e051      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ea8:	e049      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eb8:	e041      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec8:	e039      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ed8:	e031      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006ee4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ee8:	e029      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ef4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ef8:	e021      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f08:	e019      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006f14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f18:	e011      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f28:	e009      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f38:	e001      	b.n	8006f3e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd90      	pop	{r4, r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000000 	.word	0x20000000
 8006f4c:	10624dd3 	.word	0x10624dd3
 8006f50:	fdffe008 	.word	0xfdffe008

08006f54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006f54:	b490      	push	{r4, r7}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <SDMMC_GetCmdResp2+0x84>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <SDMMC_GetCmdResp2+0x88>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0a5b      	lsrs	r3, r3, #9
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f70:	4623      	mov	r3, r4
 8006f72:	1e5c      	subs	r4, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f7c:	e026      	b.n	8006fcc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <SDMMC_GetCmdResp2+0x1c>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1eb      	bne.n	8006f70 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2204      	movs	r2, #4
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006faa:	2304      	movs	r3, #4
 8006fac:	e00e      	b.n	8006fcc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e003      	b.n	8006fcc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	22c5      	movs	r2, #197	; 0xc5
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc90      	pop	{r4, r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000000 	.word	0x20000000
 8006fdc:	10624dd3 	.word	0x10624dd3

08006fe0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006fe0:	b490      	push	{r4, r7}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fe8:	4b18      	ldr	r3, [pc, #96]	; (800704c <SDMMC_GetCmdResp3+0x6c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a18      	ldr	r2, [pc, #96]	; (8007050 <SDMMC_GetCmdResp3+0x70>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	0a5b      	lsrs	r3, r3, #9
 8006ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	1e5c      	subs	r4, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007008:	e01b      	b.n	8007042 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <SDMMC_GetCmdResp3+0x1c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1eb      	bne.n	8006ffc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2204      	movs	r2, #4
 8007034:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007036:	2304      	movs	r3, #4
 8007038:	e003      	b.n	8007042 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	22c5      	movs	r2, #197	; 0xc5
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bc90      	pop	{r4, r7}
 800704a:	4770      	bx	lr
 800704c:	20000000 	.word	0x20000000
 8007050:	10624dd3 	.word	0x10624dd3

08007054 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	460b      	mov	r3, r1
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007062:	4b34      	ldr	r3, [pc, #208]	; (8007134 <SDMMC_GetCmdResp6+0xe0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a34      	ldr	r2, [pc, #208]	; (8007138 <SDMMC_GetCmdResp6+0xe4>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	0a5b      	lsrs	r3, r3, #9
 800706e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007072:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007076:	4623      	mov	r3, r4
 8007078:	1e5c      	subs	r4, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800707e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007082:	e052      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0f0      	beq.n	8007076 <SDMMC_GetCmdResp6+0x22>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1eb      	bne.n	8007076 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2204      	movs	r2, #4
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070b0:	2304      	movs	r3, #4
 80070b2:	e03a      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e02f      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fc79 	bl	80069c2 <SDIO_GetCommandResponse>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d001      	beq.n	80070de <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070da:	2301      	movs	r3, #1
 80070dc:	e025      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	22c5      	movs	r2, #197	; 0xc5
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80070e4:	2100      	movs	r1, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff fc78 	bl	80069dc <SDIO_GetResponse>
 80070ec:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d106      	bne.n	8007106 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007102:	2300      	movs	r3, #0
 8007104:	e011      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007114:	e009      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007124:	e001      	b.n	800712a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	bd90      	pop	{r4, r7, pc}
 8007132:	bf00      	nop
 8007134:	20000000 	.word	0x20000000
 8007138:	10624dd3 	.word	0x10624dd3

0800713c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800713c:	b490      	push	{r4, r7}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007144:	4b21      	ldr	r3, [pc, #132]	; (80071cc <SDMMC_GetCmdResp7+0x90>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <SDMMC_GetCmdResp7+0x94>)
 800714a:	fba2 2303 	umull	r2, r3, r2, r3
 800714e:	0a5b      	lsrs	r3, r3, #9
 8007150:	f241 3288 	movw	r2, #5000	; 0x1388
 8007154:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007158:	4623      	mov	r3, r4
 800715a:	1e5c      	subs	r4, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007164:	e02c      	b.n	80071c0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <SDMMC_GetCmdResp7+0x1c>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1eb      	bne.n	8007158 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2204      	movs	r2, #4
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007192:	2304      	movs	r3, #4
 8007194:	e014      	b.n	80071c0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e009      	b.n	80071c0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2240      	movs	r2, #64	; 0x40
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071be:	2300      	movs	r3, #0
  
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc90      	pop	{r4, r7}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000000 	.word	0x20000000
 80071d0:	10624dd3 	.word	0x10624dd3

080071d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d4:	b084      	sub	sp, #16
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	f107 001c 	add.w	r0, r7, #28
 80071e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d122      	bne.n	8007232 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007216:	2b01      	cmp	r3, #1
 8007218:	d105      	bne.n	8007226 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fa7c 	bl	8008724 <USB_CoreReset>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	e01a      	b.n	8007268 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fa70 	bl	8008724 <USB_CoreReset>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
 800725a:	e005      	b.n	8007268 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	2b01      	cmp	r3, #1
 800726c:	d10b      	bne.n	8007286 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f043 0206 	orr.w	r2, r3, #6
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f043 0220 	orr.w	r2, r3, #32
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007292:	b004      	add	sp, #16
 8007294:	4770      	bx	lr
	...

08007298 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d165      	bne.n	8007378 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a41      	ldr	r2, [pc, #260]	; (80073b4 <USB_SetTurnaroundTime+0x11c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d906      	bls.n	80072c2 <USB_SetTurnaroundTime+0x2a>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4a40      	ldr	r2, [pc, #256]	; (80073b8 <USB_SetTurnaroundTime+0x120>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d802      	bhi.n	80072c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072bc:	230f      	movs	r3, #15
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e062      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a3c      	ldr	r2, [pc, #240]	; (80073b8 <USB_SetTurnaroundTime+0x120>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d906      	bls.n	80072d8 <USB_SetTurnaroundTime+0x40>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a3b      	ldr	r2, [pc, #236]	; (80073bc <USB_SetTurnaroundTime+0x124>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d802      	bhi.n	80072d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80072d2:	230e      	movs	r3, #14
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e057      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a38      	ldr	r2, [pc, #224]	; (80073bc <USB_SetTurnaroundTime+0x124>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d906      	bls.n	80072ee <USB_SetTurnaroundTime+0x56>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a37      	ldr	r2, [pc, #220]	; (80073c0 <USB_SetTurnaroundTime+0x128>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d802      	bhi.n	80072ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80072e8:	230d      	movs	r3, #13
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e04c      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a33      	ldr	r2, [pc, #204]	; (80073c0 <USB_SetTurnaroundTime+0x128>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d906      	bls.n	8007304 <USB_SetTurnaroundTime+0x6c>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4a32      	ldr	r2, [pc, #200]	; (80073c4 <USB_SetTurnaroundTime+0x12c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d802      	bhi.n	8007304 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072fe:	230c      	movs	r3, #12
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e041      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4a2f      	ldr	r2, [pc, #188]	; (80073c4 <USB_SetTurnaroundTime+0x12c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d906      	bls.n	800731a <USB_SetTurnaroundTime+0x82>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4a2e      	ldr	r2, [pc, #184]	; (80073c8 <USB_SetTurnaroundTime+0x130>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d802      	bhi.n	800731a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007314:	230b      	movs	r3, #11
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e036      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4a2a      	ldr	r2, [pc, #168]	; (80073c8 <USB_SetTurnaroundTime+0x130>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d906      	bls.n	8007330 <USB_SetTurnaroundTime+0x98>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4a29      	ldr	r2, [pc, #164]	; (80073cc <USB_SetTurnaroundTime+0x134>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d802      	bhi.n	8007330 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800732a:	230a      	movs	r3, #10
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e02b      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4a26      	ldr	r2, [pc, #152]	; (80073cc <USB_SetTurnaroundTime+0x134>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d906      	bls.n	8007346 <USB_SetTurnaroundTime+0xae>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4a25      	ldr	r2, [pc, #148]	; (80073d0 <USB_SetTurnaroundTime+0x138>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d802      	bhi.n	8007346 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007340:	2309      	movs	r3, #9
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e020      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <USB_SetTurnaroundTime+0x138>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d906      	bls.n	800735c <USB_SetTurnaroundTime+0xc4>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <USB_SetTurnaroundTime+0x13c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d802      	bhi.n	800735c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007356:	2308      	movs	r3, #8
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	e015      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <USB_SetTurnaroundTime+0x13c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d906      	bls.n	8007372 <USB_SetTurnaroundTime+0xda>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4a1c      	ldr	r2, [pc, #112]	; (80073d8 <USB_SetTurnaroundTime+0x140>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d802      	bhi.n	8007372 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800736c:	2307      	movs	r3, #7
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	e00a      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007372:	2306      	movs	r3, #6
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e007      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800737e:	2309      	movs	r3, #9
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e001      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007384:	2309      	movs	r3, #9
 8007386:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	029b      	lsls	r3, r3, #10
 800739c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	00d8acbf 	.word	0x00d8acbf
 80073b8:	00e4e1bf 	.word	0x00e4e1bf
 80073bc:	00f423ff 	.word	0x00f423ff
 80073c0:	0106737f 	.word	0x0106737f
 80073c4:	011a499f 	.word	0x011a499f
 80073c8:	01312cff 	.word	0x01312cff
 80073cc:	014ca43f 	.word	0x014ca43f
 80073d0:	016e35ff 	.word	0x016e35ff
 80073d4:	01a6ab1f 	.word	0x01a6ab1f
 80073d8:	01e847ff 	.word	0x01e847ff

080073dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f043 0201 	orr.w	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f023 0201 	bic.w	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d106      	bne.n	800744c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e00b      	b.n	8007464 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60da      	str	r2, [r3, #12]
 800745e:	e001      	b.n	8007464 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e003      	b.n	800746c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007464:	2032      	movs	r0, #50	; 0x32
 8007466:	f7fa f839 	bl	80014dc <HAL_Delay>

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007474:	b084      	sub	sp, #16
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800748e:	2300      	movs	r3, #0
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	e009      	b.n	80074a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3340      	adds	r3, #64	; 0x40
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3301      	adds	r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2b0e      	cmp	r3, #14
 80074ac:	d9f2      	bls.n	8007494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d112      	bne.n	80074da <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
 80074d8:	e00b      	b.n	80074f2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074f8:	461a      	mov	r2, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007504:	4619      	mov	r1, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750c:	461a      	mov	r2, r3
 800750e:	680b      	ldr	r3, [r1, #0]
 8007510:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	2b01      	cmp	r3, #1
 8007516:	d10c      	bne.n	8007532 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800751e:	2100      	movs	r1, #0
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f961 	bl	80077e8 <USB_SetDevSpeed>
 8007526:	e008      	b.n	800753a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007528:	2101      	movs	r1, #1
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f95c 	bl	80077e8 <USB_SetDevSpeed>
 8007530:	e003      	b.n	800753a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007532:	2103      	movs	r1, #3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f957 	bl	80077e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800753a:	2110      	movs	r1, #16
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f90b 	bl	8007758 <USB_FlushTxFifo>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f929 	bl	80077a4 <USB_FlushRxFifo>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007562:	461a      	mov	r2, r3
 8007564:	2300      	movs	r3, #0
 8007566:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	461a      	mov	r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	461a      	mov	r2, r3
 800757c:	2300      	movs	r3, #0
 800757e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	e043      	b.n	800760e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800759c:	d118      	bne.n	80075d0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b0:	461a      	mov	r2, r3
 80075b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	e013      	b.n	80075e2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	461a      	mov	r2, r3
 80075c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e008      	b.n	80075e2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	461a      	mov	r2, r3
 80075de:	2300      	movs	r3, #0
 80075e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ee:	461a      	mov	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	461a      	mov	r2, r3
 8007602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d3b7      	bcc.n	8007586 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	e043      	b.n	80076a4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800762e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007632:	d118      	bne.n	8007666 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	461a      	mov	r2, r3
 8007648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	e013      	b.n	8007678 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	461a      	mov	r2, r3
 800765e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	e008      	b.n	8007678 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007672:	461a      	mov	r2, r3
 8007674:	2300      	movs	r3, #0
 8007676:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	461a      	mov	r2, r3
 8007686:	2300      	movs	r3, #0
 8007688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800769c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3301      	adds	r3, #1
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d3b7      	bcc.n	800761c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076be:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d111      	bne.n	80076ea <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	461a      	mov	r2, r3
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <USB_DevInit+0x2dc>)
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e4:	f043 0303 	orr.w	r3, r3, #3
 80076e8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f043 0210 	orr.w	r2, r3, #16
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <USB_DevInit+0x2e0>)
 8007710:	4313      	orrs	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f043 0208 	orr.w	r2, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d107      	bne.n	800773e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007736:	f043 0304 	orr.w	r3, r3, #4
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800774a:	b004      	add	sp, #16
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	00800100 	.word	0x00800100
 8007754:	803c3800 	.word	0x803c3800

08007758 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	019b      	lsls	r3, r3, #6
 800776a:	f043 0220 	orr.w	r2, r3, #32
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <USB_FlushTxFifo+0x48>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b20      	cmp	r3, #32
 800778e:	d0f0      	beq.n	8007772 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	00030d40 	.word	0x00030d40

080077a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2210      	movs	r2, #16
 80077b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <USB_FlushRxFifo+0x40>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d901      	bls.n	80077c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d0f0      	beq.n	80077b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	00030d40 	.word	0x00030d40

080077e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007808:	4313      	orrs	r3, r2
 800780a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0306 	and.w	r3, r3, #6
 8007832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]
 800783e:	e00a      	b.n	8007856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d002      	beq.n	800784c <USB_GetDevSpeed+0x32>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b06      	cmp	r3, #6
 800784a:	d102      	bne.n	8007852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800784c:	2302      	movs	r3, #2
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	e001      	b.n	8007856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007852:	230f      	movs	r3, #15
 8007854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d13a      	bne.n	80078f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	2101      	movs	r1, #1
 8007892:	fa01 f303 	lsl.w	r3, r1, r3
 8007896:	b29b      	uxth	r3, r3
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800789e:	4313      	orrs	r3, r2
 80078a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d155      	bne.n	8007964 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	78db      	ldrb	r3, [r3, #3]
 80078d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	059b      	lsls	r3, r3, #22
 80078da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078dc:	4313      	orrs	r3, r2
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e036      	b.n	8007964 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	2101      	movs	r1, #1
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	041b      	lsls	r3, r3, #16
 800790e:	68f9      	ldr	r1, [r7, #12]
 8007910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007914:	4313      	orrs	r3, r2
 8007916:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d11a      	bne.n	8007964 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800794a:	430b      	orrs	r3, r1
 800794c:	4313      	orrs	r3, r2
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007962:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d135      	bne.n	80079fc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	2101      	movs	r1, #1
 80079a2:	fa01 f303 	lsl.w	r3, r1, r3
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	43db      	mvns	r3, r3
 80079aa:	68f9      	ldr	r1, [r7, #12]
 80079ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b0:	4013      	ands	r3, r2
 80079b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	2101      	movs	r1, #1
 80079c6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d4:	4013      	ands	r3, r2
 80079d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	0159      	lsls	r1, r3, #5
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	440b      	add	r3, r1
 80079ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f2:	4619      	mov	r1, r3
 80079f4:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <USB_DeactivateEndpoint+0x100>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	600b      	str	r3, [r1, #0]
 80079fa:	e034      	b.n	8007a66 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	43db      	mvns	r3, r3
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	2101      	movs	r1, #1
 8007a32:	fa01 f303 	lsl.w	r3, r1, r3
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a40:	4013      	ands	r3, r2
 8007a42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	0159      	lsls	r1, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <USB_DeactivateEndpoint+0x104>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	ec337800 	.word	0xec337800
 8007a78:	eff37800 	.word	0xeff37800

08007a7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08a      	sub	sp, #40	; 0x28
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f040 815c 	bne.w	8007d56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d132      	bne.n	8007b0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ac4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	0151      	lsls	r1, r2, #5
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	440a      	add	r2, r1
 8007ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b04:	0cdb      	lsrs	r3, r3, #19
 8007b06:	04db      	lsls	r3, r3, #19
 8007b08:	6113      	str	r3, [r2, #16]
 8007b0a:	e074      	b.n	8007bf6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b26:	0cdb      	lsrs	r3, r3, #19
 8007b28:	04db      	lsls	r3, r3, #19
 8007b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6959      	ldr	r1, [r3, #20]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	440b      	add	r3, r1
 8007b68:	1e59      	subs	r1, r3, #1
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b72:	04d9      	lsls	r1, r3, #19
 8007b74:	4b9d      	ldr	r3, [pc, #628]	; (8007dec <USB_EPStartXfer+0x370>)
 8007b76:	400b      	ands	r3, r1
 8007b78:	69b9      	ldr	r1, [r7, #24]
 8007b7a:	0148      	lsls	r0, r1, #5
 8007b7c:	69f9      	ldr	r1, [r7, #28]
 8007b7e:	4401      	add	r1, r0
 8007b80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b84:	4313      	orrs	r3, r2
 8007b86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	0148      	lsls	r0, r1, #5
 8007ba2:	69f9      	ldr	r1, [r7, #28]
 8007ba4:	4401      	add	r1, r0
 8007ba6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007baa:	4313      	orrs	r3, r2
 8007bac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	78db      	ldrb	r3, [r3, #3]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d11f      	bne.n	8007bf6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007bd4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bf4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d14b      	bne.n	8007c94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c10:	461a      	mov	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d128      	bne.n	8007c72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d110      	bne.n	8007c52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	e00f      	b.n	8007c72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e12f      	b.n	8007ef4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	78db      	ldrb	r3, [r3, #3]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d015      	beq.n	8007ce8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8117 	beq.w	8007ef4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	69f9      	ldr	r1, [r7, #28]
 8007cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	634b      	str	r3, [r1, #52]	; 0x34
 8007ce6:	e105      	b.n	8007ef4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d110      	bne.n	8007d1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e00f      	b.n	8007d3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68d9      	ldr	r1, [r3, #12]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	b298      	uxth	r0, r3
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fa2b 	bl	80081aa <USB_WritePacket>
 8007d54:	e0ce      	b.n	8007ef4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	0cdb      	lsrs	r3, r3, #19
 8007d72:	04db      	lsls	r3, r3, #19
 8007d74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d126      	bne.n	8007df0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	0148      	lsls	r0, r1, #5
 8007dbc:	69f9      	ldr	r1, [r7, #28]
 8007dbe:	4401      	add	r1, r0
 8007dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007de6:	6113      	str	r3, [r2, #16]
 8007de8:	e036      	b.n	8007e58 <USB_EPStartXfer+0x3dc>
 8007dea:	bf00      	nop
 8007dec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	695a      	ldr	r2, [r3, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	1e5a      	subs	r2, r3, #1
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	8afb      	ldrh	r3, [r7, #22]
 8007e16:	04d9      	lsls	r1, r3, #19
 8007e18:	4b39      	ldr	r3, [pc, #228]	; (8007f00 <USB_EPStartXfer+0x484>)
 8007e1a:	400b      	ands	r3, r1
 8007e1c:	69b9      	ldr	r1, [r7, #24]
 8007e1e:	0148      	lsls	r0, r1, #5
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	4401      	add	r1, r0
 8007e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	8af9      	ldrh	r1, [r7, #22]
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e48:	69b9      	ldr	r1, [r7, #24]
 8007e4a:	0148      	lsls	r0, r1, #5
 8007e4c:	69f9      	ldr	r1, [r7, #28]
 8007e4e:	4401      	add	r1, r0
 8007e50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e54:	4313      	orrs	r3, r2
 8007e56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10d      	bne.n	8007e7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	68d9      	ldr	r1, [r3, #12]
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	460a      	mov	r2, r1
 8007e78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	78db      	ldrb	r3, [r3, #3]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d128      	bne.n	8007ed4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d110      	bne.n	8007eb4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e00f      	b.n	8007ed4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	0151      	lsls	r1, r2, #5
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	440a      	add	r2, r1
 8007eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3720      	adds	r7, #32
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	1ff80000 	.word	0x1ff80000

08007f04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	f040 80cd 	bne.w	80080c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d132      	bne.n	8007f94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	0151      	lsls	r1, r2, #5
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	440a      	add	r2, r1
 8007f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f8c:	0cdb      	lsrs	r3, r3, #19
 8007f8e:	04db      	lsls	r3, r3, #19
 8007f90:	6113      	str	r3, [r2, #16]
 8007f92:	e04e      	b.n	8008032 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fae:	0cdb      	lsrs	r3, r3, #19
 8007fb0:	04db      	lsls	r3, r3, #19
 8007fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	440a      	add	r2, r1
 8008002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800800a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008022:	6939      	ldr	r1, [r7, #16]
 8008024:	0148      	lsls	r0, r1, #5
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	4401      	add	r1, r0
 800802a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800802e:	4313      	orrs	r3, r2
 8008030:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d11e      	bne.n	8008076 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d009      	beq.n	8008054 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	461a      	mov	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	e092      	b.n	800819c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	440a      	add	r2, r1
 800808c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008094:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d07e      	beq.n	800819c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	2101      	movs	r1, #1
 80080b0:	fa01 f303 	lsl.w	r3, r1, r3
 80080b4:	6979      	ldr	r1, [r7, #20]
 80080b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ba:	4313      	orrs	r3, r2
 80080bc:	634b      	str	r3, [r1, #52]	; 0x34
 80080be:	e06d      	b.n	800819c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080da:	0cdb      	lsrs	r3, r3, #19
 80080dc:	04db      	lsls	r3, r3, #19
 80080de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008102:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800812e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800814a:	6939      	ldr	r1, [r7, #16]
 800814c:	0148      	lsls	r0, r1, #5
 800814e:	6979      	ldr	r1, [r7, #20]
 8008150:	4401      	add	r1, r0
 8008152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008156:	4313      	orrs	r3, r2
 8008158:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10d      	bne.n	800817c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	68d9      	ldr	r1, [r3, #12]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	460a      	mov	r2, r1
 800817a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	440a      	add	r2, r1
 8008192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008196:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800819a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b089      	sub	sp, #36	; 0x24
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	4611      	mov	r1, r2
 80081b6:	461a      	mov	r2, r3
 80081b8:	460b      	mov	r3, r1
 80081ba:	71fb      	strb	r3, [r7, #7]
 80081bc:	4613      	mov	r3, r2
 80081be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80081c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11a      	bne.n	8008206 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081d0:	88bb      	ldrh	r3, [r7, #4]
 80081d2:	3303      	adds	r3, #3
 80081d4:	089b      	lsrs	r3, r3, #2
 80081d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	61bb      	str	r3, [r7, #24]
 80081dc:	e00f      	b.n	80081fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	031a      	lsls	r2, r3, #12
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ea:	461a      	mov	r2, r3
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	3304      	adds	r3, #4
 80081f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	3301      	adds	r3, #1
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d3eb      	bcc.n	80081de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3724      	adds	r7, #36	; 0x24
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008214:	b480      	push	{r7}
 8008216:	b089      	sub	sp, #36	; 0x24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	3303      	adds	r3, #3
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
 8008236:	e00b      	b.n	8008250 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	601a      	str	r2, [r3, #0]
    pDest++;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3304      	adds	r3, #4
 8008248:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	3301      	adds	r3, #1
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	429a      	cmp	r2, r3
 8008256:	d3ef      	bcc.n	8008238 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008258:	69fb      	ldr	r3, [r7, #28]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3724      	adds	r7, #36	; 0x24
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d12c      	bne.n	80082dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	db12      	blt.n	80082ba <USB_EPSetStall+0x54>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00f      	beq.n	80082ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e02b      	b.n	8008334 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	db12      	blt.n	8008314 <USB_EPSetStall+0xae>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00f      	beq.n	8008314 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008312:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d128      	bne.n	80083b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800837c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	78db      	ldrb	r3, [r3, #3]
 8008382:	2b03      	cmp	r3, #3
 8008384:	d003      	beq.n	800838e <USB_EPClearStall+0x4c>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d138      	bne.n	8008400 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e027      	b.n	8008400 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	0151      	lsls	r1, r2, #5
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	440a      	add	r2, r1
 80083c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	78db      	ldrb	r3, [r3, #3]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d003      	beq.n	80083e0 <USB_EPClearStall+0x9e>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	78db      	ldrb	r3, [r3, #3]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d10f      	bne.n	8008400 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800842c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008430:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008442:	68f9      	ldr	r1, [r7, #12]
 8008444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008448:	4313      	orrs	r3, r2
 800844a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008474:	f023 0302 	bic.w	r3, r3, #2
 8008478:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800847a:	2003      	movs	r0, #3
 800847c:	f7f9 f82e 	bl	80014dc <HAL_Delay>

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80084aa:	2003      	movs	r0, #3
 80084ac:	f7f9 f816 	bl	80014dc <HAL_Delay>

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4013      	ands	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084d2:	68fb      	ldr	r3, [r7, #12]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	4013      	ands	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	0c1b      	lsrs	r3, r3, #16
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	4013      	ands	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	b29b      	uxth	r3, r3
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	4013      	ands	r3, r2
 8008574:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008576:	68bb      	ldr	r3, [r7, #8]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
 80085b4:	01db      	lsls	r3, r3, #7
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4013      	ands	r3, r2
 80085d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085d2:	68bb      	ldr	r3, [r7, #8]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	f003 0301 	and.w	r3, r3, #1
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008616:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f003 0306 	and.w	r3, r3, #6
 800862c:	2b04      	cmp	r3, #4
 800862e:	d109      	bne.n	8008644 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863e:	f043 0303 	orr.w	r3, r3, #3
 8008642:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008656:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	460b      	mov	r3, r1
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	333c      	adds	r3, #60	; 0x3c
 800867e:	3304      	adds	r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	4a26      	ldr	r2, [pc, #152]	; (8008720 <USB_EP0_OutStart+0xb8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d90a      	bls.n	80086a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800869c:	d101      	bne.n	80086a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e037      	b.n	8008712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	461a      	mov	r2, r3
 80086aa:	2300      	movs	r3, #0
 80086ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d0:	f043 0318 	orr.w	r3, r3, #24
 80086d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80086e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10f      	bne.n	8008710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800870e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	4f54300a 	.word	0x4f54300a

08008724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <USB_CoreReset+0x64>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d901      	bls.n	8008742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e01b      	b.n	800877a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	daf2      	bge.n	8008730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f043 0201 	orr.w	r2, r3, #1
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a09      	ldr	r2, [pc, #36]	; (8008788 <USB_CoreReset+0x64>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d901      	bls.n	800876c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e006      	b.n	800877a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b01      	cmp	r3, #1
 8008776:	d0f0      	beq.n	800875a <USB_CoreReset+0x36>

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	00030d40 	.word	0x00030d40

0800878c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008790:	4904      	ldr	r1, [pc, #16]	; (80087a4 <MX_FATFS_Init+0x18>)
 8008792:	4805      	ldr	r0, [pc, #20]	; (80087a8 <MX_FATFS_Init+0x1c>)
 8008794:	f001 fbb2 	bl	8009efc <FATFS_LinkDriver>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	4b03      	ldr	r3, [pc, #12]	; (80087ac <MX_FATFS_Init+0x20>)
 800879e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80087a0:	bf00      	nop
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000534 	.word	0x20000534
 80087a8:	2000000c 	.word	0x2000000c
 80087ac:	20000538 	.word	0x20000538

080087b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80087ba:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <USER_initialize+0x24>)
 80087bc:	2201      	movs	r2, #1
 80087be:	701a      	strb	r2, [r3, #0]
    return Stat;
 80087c0:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <USER_initialize+0x24>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000009 	.word	0x20000009

080087d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80087e2:	4b06      	ldr	r3, [pc, #24]	; (80087fc <USER_status+0x24>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <USER_status+0x24>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20000009 	.word	0x20000009

08008800 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008810:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800882e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	603a      	str	r2, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
 8008848:	460b      	mov	r3, r1
 800884a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
    return res;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7c1b      	ldrb	r3, [r3, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d115      	bne.n	80088a2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800887a:	2202      	movs	r2, #2
 800887c:	2181      	movs	r1, #129	; 0x81
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fec5 	bl	800a60e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800888a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800888e:	2202      	movs	r2, #2
 8008890:	2101      	movs	r1, #1
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 febb 	bl	800a60e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80088a0:	e012      	b.n	80088c8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	2202      	movs	r2, #2
 80088a6:	2181      	movs	r1, #129	; 0x81
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 feb0 	bl	800a60e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088b4:	2340      	movs	r3, #64	; 0x40
 80088b6:	2202      	movs	r2, #2
 80088b8:	2101      	movs	r1, #1
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 fea7 	bl	800a60e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088c8:	2308      	movs	r3, #8
 80088ca:	2203      	movs	r2, #3
 80088cc:	2182      	movs	r1, #130	; 0x82
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 fe9d 	bl	800a60e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80088da:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088de:	f002 f813 	bl	800a908 <malloc>
 80088e2:	4603      	mov	r3, r0
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	e026      	b.n	800894a <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008902:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2200      	movs	r2, #0
 8008912:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	7c1b      	ldrb	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800892c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008930:	2101      	movs	r1, #1
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 ff5c 	bl	800a7f0 <USBD_LL_PrepareReceive>
 8008938:	e007      	b.n	800894a <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	2101      	movs	r1, #1
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 ff53 	bl	800a7f0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008964:	2181      	movs	r1, #129	; 0x81
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 fe77 	bl	800a65a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008972:	2101      	movs	r1, #1
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fe70 	bl	800a65a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008982:	2182      	movs	r1, #130	; 0x82
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fe68 	bl	800a65a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00e      	beq.n	80089b8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 ffb4 	bl	800a918 <free>
    pdev->pClassData = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b086      	sub	sp, #24
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d039      	beq.n	8008a60 <USBD_CDC_Setup+0x9e>
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d17c      	bne.n	8008aea <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	88db      	ldrh	r3, [r3, #6]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d029      	beq.n	8008a4c <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da11      	bge.n	8008a26 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008a0e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	88d2      	ldrh	r2, [r2, #6]
 8008a14:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 f99c 	bl	8009d5c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008a24:	e068      	b.n	8008af8 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785a      	ldrb	r2, [r3, #1]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	88db      	ldrh	r3, [r3, #6]
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a3c:	6939      	ldr	r1, [r7, #16]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	88db      	ldrh	r3, [r3, #6]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f9b7 	bl	8009db8 <USBD_CtlPrepareRx>
    break;
 8008a4a:	e055      	b.n	8008af8 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	7850      	ldrb	r0, [r2, #1]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	4798      	blx	r3
    break;
 8008a5e:	e04b      	b.n	8008af8 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b0a      	cmp	r3, #10
 8008a66:	d017      	beq.n	8008a98 <USBD_CDC_Setup+0xd6>
 8008a68:	2b0b      	cmp	r3, #11
 8008a6a:	d029      	beq.n	8008ac0 <USBD_CDC_Setup+0xfe>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d133      	bne.n	8008ad8 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d107      	bne.n	8008a8a <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	2202      	movs	r2, #2
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 f96a 	bl	8009d5c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008a88:	e02e      	b.n	8008ae8 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 f8fa 	bl	8009c86 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008a92:	2302      	movs	r3, #2
 8008a94:	75fb      	strb	r3, [r7, #23]
      break;
 8008a96:	e027      	b.n	8008ae8 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d107      	bne.n	8008ab2 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008aa2:	f107 030f 	add.w	r3, r7, #15
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 f956 	bl	8009d5c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008ab0:	e01a      	b.n	8008ae8 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f8e6 	bl	8009c86 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008aba:	2302      	movs	r3, #2
 8008abc:	75fb      	strb	r3, [r7, #23]
      break;
 8008abe:	e013      	b.n	8008ae8 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d00d      	beq.n	8008ae6 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f8da 	bl	8009c86 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008ad6:	e006      	b.n	8008ae6 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f8d3 	bl	8009c86 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae4:	e000      	b.n	8008ae8 <USBD_CDC_Setup+0x126>
      break;
 8008ae6:	bf00      	nop
    }
    break;
 8008ae8:	e006      	b.n	8008af8 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 f8ca 	bl	8009c86 <USBD_CtlError>
    ret = USBD_FAIL;
 8008af2:	2302      	movs	r3, #2
 8008af4:	75fb      	strb	r3, [r7, #23]
    break;
 8008af6:	bf00      	nop
  }

  return ret;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b14:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008b1c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d03a      	beq.n	8008b9e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	331c      	adds	r3, #28
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d029      	beq.n	8008b92 <USBD_CDC_DataIn+0x90>
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	331c      	adds	r3, #28
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	78f9      	ldrb	r1, [r7, #3]
 8008b52:	68b8      	ldr	r0, [r7, #8]
 8008b54:	460b      	mov	r3, r1
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	1a5b      	subs	r3, r3, r1
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4403      	add	r3, r0
 8008b5e:	3344      	adds	r3, #68	; 0x44
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b66:	fb03 f301 	mul.w	r3, r3, r1
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d110      	bne.n	8008b92 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	331c      	adds	r3, #28
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008b84:	78f9      	ldrb	r1, [r7, #3]
 8008b86:	2300      	movs	r3, #0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fe0d 	bl	800a7aa <USBD_LL_Transmit>
 8008b90:	e003      	b.n	8008b9a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e000      	b.n	8008ba0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b9e:	2302      	movs	r3, #2
  }
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 fe38 	bl	800a836 <USBD_LL_GetRxDataSize>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00d      	beq.n	8008bf4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008bec:	4611      	mov	r1, r2
 8008bee:	4798      	blx	r3

    return USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e000      	b.n	8008bf6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008bf4:	2302      	movs	r3, #2
  }
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c0c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <USBD_CDC_EP0_RxReady+0x46>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c1e:	2bff      	cmp	r3, #255	; 0xff
 8008c20:	d010      	beq.n	8008c44 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c38:	b292      	uxth	r2, r2
 8008c3a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	22ff      	movs	r2, #255	; 0xff
 8008c40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2243      	movs	r2, #67	; 0x43
 8008c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c5e:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	200000a8 	.word	0x200000a8

08008c70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2243      	movs	r2, #67	; 0x43
 8008c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	20000064 	.word	0x20000064

08008c90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2243      	movs	r2, #67	; 0x43
 8008c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c9e:	4b03      	ldr	r3, [pc, #12]	; (8008cac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200000ec 	.word	0x200000ec

08008cb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	220a      	movs	r2, #10
 8008cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20000020 	.word	0x20000020

08008cd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d005      	beq.n	8008cf0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b087      	sub	sp, #28
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d12:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d1c:	88fa      	ldrh	r2, [r7, #6]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d42:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7c1b      	ldrb	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d86:	2101      	movs	r1, #1
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fd31 	bl	800a7f0 <USBD_LL_PrepareReceive>
 8008d8e:	e007      	b.n	8008da0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d96:	2340      	movs	r3, #64	; 0x40
 8008d98:	2101      	movs	r1, #1
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 fd28 	bl	800a7f0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e000      	b.n	8008da6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008da4:	2302      	movs	r3, #2
  }
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	4613      	mov	r3, r2
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e01a      	b.n	8008dfc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	79fa      	ldrb	r2, [r7, #7]
 8008df2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f001 fba3 	bl	800a540 <USBD_LL_Init>

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d006      	beq.n	8008e26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	e001      	b.n	8008e2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e26:	2302      	movs	r3, #2
 8008e28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f001 fbc9 	bl	800a5d8 <USBD_LL_Start>

  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00c      	beq.n	8008e9a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4798      	blx	r3
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	4611      	mov	r1, r2
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
  return USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fe95 	bl	8009c0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d00c      	beq.n	8008f20 <USBD_LL_SetupStage+0x56>
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d302      	bcc.n	8008f10 <USBD_LL_SetupStage+0x46>
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d010      	beq.n	8008f30 <USBD_LL_SetupStage+0x66>
 8008f0e:	e017      	b.n	8008f40 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fa05 	bl	8009328 <USBD_StdDevReq>
    break;
 8008f1e:	e01a      	b.n	8008f56 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fa67 	bl	80093fc <USBD_StdItfReq>
    break;
 8008f2e:	e012      	b.n	8008f56 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 faa5 	bl	8009488 <USBD_StdEPReq>
    break;
 8008f3e:	e00a      	b.n	8008f56 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008f46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fba2 	bl	800a698 <USBD_LL_StallEP>
    break;
 8008f54:	bf00      	nop
  }

  return USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d14b      	bne.n	800900c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008f7a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d134      	bne.n	8008ff0 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d919      	bls.n	8008fc6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	1ad2      	subs	r2, r2, r3
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d203      	bcs.n	8008fb4 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	e002      	b.n	8008fba <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 ff18 	bl	8009df4 <USBD_CtlContinueRx>
 8008fc4:	e038      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d105      	bne.n	8008fe8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 ff15 	bl	8009e18 <USBD_CtlSendStatus>
 8008fee:	e023      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d11e      	bne.n	8009038 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009002:	2100      	movs	r1, #0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f001 fb47 	bl	800a698 <USBD_LL_StallEP>
 800900a:	e015      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00d      	beq.n	8009034 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800901e:	2b03      	cmp	r3, #3
 8009020:	d108      	bne.n	8009034 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	7afa      	ldrb	r2, [r7, #11]
 800902c:	4611      	mov	r1, r2
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	4798      	blx	r3
 8009032:	e001      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009034:	2302      	movs	r3, #2
 8009036:	e000      	b.n	800903a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	460b      	mov	r3, r1
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d17f      	bne.n	8009156 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3314      	adds	r3, #20
 800905a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009062:	2b02      	cmp	r3, #2
 8009064:	d15c      	bne.n	8009120 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d915      	bls.n	800909e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	b29b      	uxth	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fe82 	bl	8009d94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f001 fbaa 	bl	800a7f0 <USBD_LL_PrepareReceive>
 800909c:	e04e      	b.n	800913c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	6912      	ldr	r2, [r2, #16]
 80090a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80090aa:	fb02 f201 	mul.w	r2, r2, r1
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11c      	bne.n	80090ee <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80090bc:	429a      	cmp	r2, r3
 80090be:	d316      	bcc.n	80090ee <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d20f      	bcs.n	80090ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fe5e 	bl	8009d94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80090e0:	2300      	movs	r3, #0
 80090e2:	2200      	movs	r2, #0
 80090e4:	2100      	movs	r1, #0
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f001 fb82 	bl	800a7f0 <USBD_LL_PrepareReceive>
 80090ec:	e026      	b.n	800913c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009100:	2b03      	cmp	r3, #3
 8009102:	d105      	bne.n	8009110 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009110:	2180      	movs	r1, #128	; 0x80
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f001 fac0 	bl	800a698 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fe90 	bl	8009e3e <USBD_CtlReceiveStatus>
 800911e:	e00d      	b.n	800913c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009126:	2b04      	cmp	r3, #4
 8009128:	d004      	beq.n	8009134 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009134:	2180      	movs	r1, #128	; 0x80
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f001 faae 	bl	800a698 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009142:	2b01      	cmp	r3, #1
 8009144:	d11d      	bne.n	8009182 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7ff fe82 	bl	8008e50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009154:	e015      	b.n	8009182 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00d      	beq.n	800917e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8009168:	2b03      	cmp	r3, #3
 800916a:	d108      	bne.n	800917e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	7afa      	ldrb	r2, [r7, #11]
 8009176:	4611      	mov	r1, r2
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	4798      	blx	r3
 800917c:	e001      	b.n	8009182 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800917e:	2302      	movs	r3, #2
 8009180:	e000      	b.n	8009184 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009194:	2340      	movs	r3, #64	; 0x40
 8009196:	2200      	movs	r2, #0
 8009198:	2100      	movs	r1, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 fa37 	bl	800a60e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2240      	movs	r2, #64	; 0x40
 80091ac:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	2200      	movs	r2, #0
 80091b4:	2180      	movs	r1, #128	; 0x80
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fa29 	bl	800a60e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2240      	movs	r2, #64	; 0x40
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6852      	ldr	r2, [r2, #4]
 80091fc:	b2d2      	uxtb	r2, r2
 80091fe:	4611      	mov	r1, r2
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
  }

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2204      	movs	r2, #4
 8009246:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009288:	2b03      	cmp	r3, #3
 800928a:	d10b      	bne.n	80092a4 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6852      	ldr	r2, [r2, #4]
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	4611      	mov	r1, r2
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3

  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800933e:	2b20      	cmp	r3, #32
 8009340:	d004      	beq.n	800934c <USBD_StdDevReq+0x24>
 8009342:	2b40      	cmp	r3, #64	; 0x40
 8009344:	d002      	beq.n	800934c <USBD_StdDevReq+0x24>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d008      	beq.n	800935c <USBD_StdDevReq+0x34>
 800934a:	e04c      	b.n	80093e6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
    break;
 800935a:	e049      	b.n	80093f0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b09      	cmp	r3, #9
 8009362:	d83a      	bhi.n	80093da <USBD_StdDevReq+0xb2>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <USBD_StdDevReq+0x44>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	080093bd 	.word	0x080093bd
 8009370:	080093d1 	.word	0x080093d1
 8009374:	080093db 	.word	0x080093db
 8009378:	080093c7 	.word	0x080093c7
 800937c:	080093db 	.word	0x080093db
 8009380:	0800939f 	.word	0x0800939f
 8009384:	08009395 	.word	0x08009395
 8009388:	080093db 	.word	0x080093db
 800938c:	080093b3 	.word	0x080093b3
 8009390:	080093a9 	.word	0x080093a9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f9d2 	bl	8009740 <USBD_GetDescriptor>
      break;
 800939c:	e022      	b.n	80093e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fac7 	bl	8009934 <USBD_SetAddress>
      break;
 80093a6:	e01d      	b.n	80093e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fb04 	bl	80099b8 <USBD_SetConfig>
      break;
 80093b0:	e018      	b.n	80093e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb8d 	bl	8009ad4 <USBD_GetConfig>
      break;
 80093ba:	e013      	b.n	80093e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fbbc 	bl	8009b3c <USBD_GetStatus>
      break;
 80093c4:	e00e      	b.n	80093e4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fbea 	bl	8009ba2 <USBD_SetFeature>
      break;
 80093ce:	e009      	b.n	80093e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fbf9 	bl	8009bca <USBD_ClrFeature>
      break;
 80093d8:	e004      	b.n	80093e4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc52 	bl	8009c86 <USBD_CtlError>
      break;
 80093e2:	bf00      	nop
    }
    break;
 80093e4:	e004      	b.n	80093f0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fc4c 	bl	8009c86 <USBD_CtlError>
    break;
 80093ee:	bf00      	nop
  }

  return ret;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop

080093fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009412:	2b20      	cmp	r3, #32
 8009414:	d003      	beq.n	800941e <USBD_StdItfReq+0x22>
 8009416:	2b40      	cmp	r3, #64	; 0x40
 8009418:	d001      	beq.n	800941e <USBD_StdItfReq+0x22>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d12a      	bne.n	8009474 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009424:	3b01      	subs	r3, #1
 8009426:	2b02      	cmp	r3, #2
 8009428:	d81d      	bhi.n	8009466 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	889b      	ldrh	r3, [r3, #4]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	d813      	bhi.n	800945c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
 8009442:	4603      	mov	r3, r0
 8009444:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	88db      	ldrh	r3, [r3, #6]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d110      	bne.n	8009470 <USBD_StdItfReq+0x74>
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10d      	bne.n	8009470 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fcdf 	bl	8009e18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800945a:	e009      	b.n	8009470 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fc11 	bl	8009c86 <USBD_CtlError>
      break;
 8009464:	e004      	b.n	8009470 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fc0c 	bl	8009c86 <USBD_CtlError>
      break;
 800946e:	e000      	b.n	8009472 <USBD_StdItfReq+0x76>
      break;
 8009470:	bf00      	nop
    }
    break;
 8009472:	e004      	b.n	800947e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fc05 	bl	8009c86 <USBD_CtlError>
    break;
 800947c:	bf00      	nop
  }

  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	889b      	ldrh	r3, [r3, #4]
 800949a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d004      	beq.n	80094b2 <USBD_StdEPReq+0x2a>
 80094a8:	2b40      	cmp	r3, #64	; 0x40
 80094aa:	d002      	beq.n	80094b2 <USBD_StdEPReq+0x2a>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d008      	beq.n	80094c2 <USBD_StdEPReq+0x3a>
 80094b0:	e13b      	b.n	800972a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
    break;
 80094c0:	e138      	b.n	8009734 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d10a      	bne.n	80094e4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]

      return ret;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	e128      	b.n	8009736 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d03e      	beq.n	800956a <USBD_StdEPReq+0xe2>
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d002      	beq.n	80094f6 <USBD_StdEPReq+0x6e>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d070      	beq.n	80095d6 <USBD_StdEPReq+0x14e>
 80094f4:	e113      	b.n	800971e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d002      	beq.n	8009506 <USBD_StdEPReq+0x7e>
 8009500:	2b03      	cmp	r3, #3
 8009502:	d015      	beq.n	8009530 <USBD_StdEPReq+0xa8>
 8009504:	e02b      	b.n	800955e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00c      	beq.n	8009526 <USBD_StdEPReq+0x9e>
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b80      	cmp	r3, #128	; 0x80
 8009510:	d009      	beq.n	8009526 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 f8be 	bl	800a698 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800951c:	2180      	movs	r1, #128	; 0x80
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f8ba 	bl	800a698 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009524:	e020      	b.n	8009568 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fbac 	bl	8009c86 <USBD_CtlError>
        break;
 800952e:	e01b      	b.n	8009568 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10e      	bne.n	8009556 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <USBD_StdEPReq+0xce>
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b80      	cmp	r3, #128	; 0x80
 8009542:	d008      	beq.n	8009556 <USBD_StdEPReq+0xce>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	88db      	ldrh	r3, [r3, #6]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 f8a1 	bl	800a698 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fc5e 	bl	8009e18 <USBD_CtlSendStatus>

        break;
 800955c:	e004      	b.n	8009568 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fb90 	bl	8009c86 <USBD_CtlError>
        break;
 8009566:	bf00      	nop
      }
      break;
 8009568:	e0de      	b.n	8009728 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009570:	2b02      	cmp	r3, #2
 8009572:	d002      	beq.n	800957a <USBD_StdEPReq+0xf2>
 8009574:	2b03      	cmp	r3, #3
 8009576:	d015      	beq.n	80095a4 <USBD_StdEPReq+0x11c>
 8009578:	e026      	b.n	80095c8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00c      	beq.n	800959a <USBD_StdEPReq+0x112>
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d009      	beq.n	800959a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 f884 	bl	800a698 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009590:	2180      	movs	r1, #128	; 0x80
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f880 	bl	800a698 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009598:	e01c      	b.n	80095d4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fb72 	bl	8009c86 <USBD_CtlError>
        break;
 80095a2:	e017      	b.n	80095d4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	885b      	ldrh	r3, [r3, #2]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d112      	bne.n	80095d2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 f88b 	bl	800a6d6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc29 	bl	8009e18 <USBD_CtlSendStatus>
        }
        break;
 80095c6:	e004      	b.n	80095d2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fb5b 	bl	8009c86 <USBD_CtlError>
        break;
 80095d0:	e000      	b.n	80095d4 <USBD_StdEPReq+0x14c>
        break;
 80095d2:	bf00      	nop
      }
      break;
 80095d4:	e0a8      	b.n	8009728 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d002      	beq.n	80095e6 <USBD_StdEPReq+0x15e>
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d031      	beq.n	8009648 <USBD_StdEPReq+0x1c0>
 80095e4:	e095      	b.n	8009712 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <USBD_StdEPReq+0x174>
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d004      	beq.n	80095fc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fb46 	bl	8009c86 <USBD_CtlError>
          break;
 80095fa:	e08f      	b.n	800971c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80095fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da0b      	bge.n	800961c <USBD_StdEPReq+0x194>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	3310      	adds	r3, #16
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	3304      	adds	r3, #4
 800961a:	e00a      	b.n	8009632 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4413      	add	r3, r2
 8009632:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2202      	movs	r2, #2
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fb8b 	bl	8009d5c <USBD_CtlSendData>
          break;
 8009646:	e069      	b.n	800971c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	da11      	bge.n	8009674 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	f003 020f 	and.w	r2, r3, #15
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3318      	adds	r3, #24
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d117      	bne.n	800969a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fb0a 	bl	8009c86 <USBD_CtlError>
            break;
 8009672:	e053      	b.n	800971c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	f003 020f 	and.w	r2, r3, #15
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 faf7 	bl	8009c86 <USBD_CtlError>
            break;
 8009698:	e040      	b.n	800971c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800969a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	da0b      	bge.n	80096ba <USBD_StdEPReq+0x232>
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	3310      	adds	r3, #16
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	4413      	add	r3, r2
 80096b6:	3304      	adds	r3, #4
 80096b8:	e00a      	b.n	80096d0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4413      	add	r3, r2
 80096d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <USBD_StdEPReq+0x256>
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	2b80      	cmp	r3, #128	; 0x80
 80096dc:	d103      	bne.n	80096e6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	e00e      	b.n	8009704 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f812 	bl	800a714 <USBD_LL_IsStallEP>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	e002      	b.n	8009704 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2202      	movs	r2, #2
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fb26 	bl	8009d5c <USBD_CtlSendData>
          break;
 8009710:	e004      	b.n	800971c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fab6 	bl	8009c86 <USBD_CtlError>
        break;
 800971a:	bf00      	nop
      }
      break;
 800971c:	e004      	b.n	8009728 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fab0 	bl	8009c86 <USBD_CtlError>
      break;
 8009726:	bf00      	nop
    }
    break;
 8009728:	e004      	b.n	8009734 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 faaa 	bl	8009c86 <USBD_CtlError>
    break;
 8009732:	bf00      	nop
  }

  return ret;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	885b      	ldrh	r3, [r3, #2]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	2b06      	cmp	r3, #6
 8009756:	f200 80c9 	bhi.w	80098ec <USBD_GetDescriptor+0x1ac>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <USBD_GetDescriptor+0x20>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	0800977d 	.word	0x0800977d
 8009764:	08009795 	.word	0x08009795
 8009768:	080097d5 	.word	0x080097d5
 800976c:	080098ed 	.word	0x080098ed
 8009770:	080098ed 	.word	0x080098ed
 8009774:	08009899 	.word	0x08009899
 8009778:	080098bf 	.word	0x080098bf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	7c12      	ldrb	r2, [r2, #16]
 8009788:	f107 010a 	add.w	r1, r7, #10
 800978c:	4610      	mov	r0, r2
 800978e:	4798      	blx	r3
 8009790:	60f8      	str	r0, [r7, #12]
    break;
 8009792:	e0b0      	b.n	80098f6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	7c1b      	ldrb	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10d      	bne.n	80097b8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80097a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a4:	f107 020a 	add.w	r2, r7, #10
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	2202      	movs	r2, #2
 80097b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80097b6:	e09e      	b.n	80098f6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	f107 020a 	add.w	r2, r7, #10
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
 80097c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	2202      	movs	r2, #2
 80097d0:	701a      	strb	r2, [r3, #0]
    break;
 80097d2:	e090      	b.n	80098f6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	885b      	ldrh	r3, [r3, #2]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b05      	cmp	r3, #5
 80097dc:	d856      	bhi.n	800988c <USBD_GetDescriptor+0x14c>
 80097de:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <USBD_GetDescriptor+0xa4>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	080097fd 	.word	0x080097fd
 80097e8:	08009815 	.word	0x08009815
 80097ec:	0800982d 	.word	0x0800982d
 80097f0:	08009845 	.word	0x08009845
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	08009875 	.word	0x08009875
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	7c12      	ldrb	r2, [r2, #16]
 8009808:	f107 010a 	add.w	r1, r7, #10
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	60f8      	str	r0, [r7, #12]
      break;
 8009812:	e040      	b.n	8009896 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 010a 	add.w	r1, r7, #10
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
      break;
 800982a:	e034      	b.n	8009896 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 010a 	add.w	r1, r7, #10
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
      break;
 8009842:	e028      	b.n	8009896 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	7c12      	ldrb	r2, [r2, #16]
 8009850:	f107 010a 	add.w	r1, r7, #10
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	60f8      	str	r0, [r7, #12]
      break;
 800985a:	e01c      	b.n	8009896 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	7c12      	ldrb	r2, [r2, #16]
 8009868:	f107 010a 	add.w	r1, r7, #10
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
 8009870:	60f8      	str	r0, [r7, #12]
      break;
 8009872:	e010      	b.n	8009896 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	7c12      	ldrb	r2, [r2, #16]
 8009880:	f107 010a 	add.w	r1, r7, #10
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
 8009888:	60f8      	str	r0, [r7, #12]
      break;
 800988a:	e004      	b.n	8009896 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f9f9 	bl	8009c86 <USBD_CtlError>
      return;
 8009894:	e04b      	b.n	800992e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009896:	e02e      	b.n	80098f6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7c1b      	ldrb	r3, [r3, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a8:	f107 020a 	add.w	r2, r7, #10
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
      break;
 80098b2:	e020      	b.n	80098f6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f9e5 	bl	8009c86 <USBD_CtlError>
      return;
 80098bc:	e037      	b.n	800992e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7c1b      	ldrb	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10d      	bne.n	80098e2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	f107 020a 	add.w	r2, r7, #10
 80098d2:	4610      	mov	r0, r2
 80098d4:	4798      	blx	r3
 80098d6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	2207      	movs	r2, #7
 80098de:	701a      	strb	r2, [r3, #0]
      break;
 80098e0:	e009      	b.n	80098f6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f9ce 	bl	8009c86 <USBD_CtlError>
      return;
 80098ea:	e020      	b.n	800992e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f9c9 	bl	8009c86 <USBD_CtlError>
    return;
 80098f4:	e01b      	b.n	800992e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80098f6:	897b      	ldrh	r3, [r7, #10]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d011      	beq.n	8009920 <USBD_GetDescriptor+0x1e0>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	88db      	ldrh	r3, [r3, #6]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	88da      	ldrh	r2, [r3, #6]
 8009908:	897b      	ldrh	r3, [r7, #10]
 800990a:	4293      	cmp	r3, r2
 800990c:	bf28      	it	cs
 800990e:	4613      	movcs	r3, r2
 8009910:	b29b      	uxth	r3, r3
 8009912:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009914:	897b      	ldrh	r3, [r7, #10]
 8009916:	461a      	mov	r2, r3
 8009918:	68f9      	ldr	r1, [r7, #12]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa1e 	bl	8009d5c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	88db      	ldrh	r3, [r3, #6]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d102      	bne.n	800992e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fa75 	bl	8009e18 <USBD_CtlSendStatus>
  }
}
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	889b      	ldrh	r3, [r3, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d130      	bne.n	80099a8 <USBD_SetAddress+0x74>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	88db      	ldrh	r3, [r3, #6]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d12c      	bne.n	80099a8 <USBD_SetAddress+0x74>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	2b7f      	cmp	r3, #127	; 0x7f
 8009954:	d828      	bhi.n	80099a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	885b      	ldrh	r3, [r3, #2]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009960:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009968:	2b03      	cmp	r3, #3
 800996a:	d104      	bne.n	8009976 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f989 	bl	8009c86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009974:	e01c      	b.n	80099b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7bfa      	ldrb	r2, [r7, #15]
 800997a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fef2 	bl	800a76c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa45 	bl	8009e18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999c:	e008      	b.n	80099b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a6:	e003      	b.n	80099b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f96b 	bl	8009c86 <USBD_CtlError>
  }
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	885b      	ldrh	r3, [r3, #2]
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	4b41      	ldr	r3, [pc, #260]	; (8009ad0 <USBD_SetConfig+0x118>)
 80099ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099cc:	4b40      	ldr	r3, [pc, #256]	; (8009ad0 <USBD_SetConfig+0x118>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d904      	bls.n	80099de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f955 	bl	8009c86 <USBD_CtlError>
 80099dc:	e075      	b.n	8009aca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d002      	beq.n	80099ee <USBD_SetConfig+0x36>
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d023      	beq.n	8009a34 <USBD_SetConfig+0x7c>
 80099ec:	e062      	b.n	8009ab4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80099ee:	4b38      	ldr	r3, [pc, #224]	; (8009ad0 <USBD_SetConfig+0x118>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d01a      	beq.n	8009a2c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80099f6:	4b36      	ldr	r3, [pc, #216]	; (8009ad0 <USBD_SetConfig+0x118>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2203      	movs	r2, #3
 8009a04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a08:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff fa29 	bl	8008e66 <USBD_SetClassConfig>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d104      	bne.n	8009a24 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f932 	bl	8009c86 <USBD_CtlError>
          return;
 8009a22:	e052      	b.n	8009aca <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f9f7 	bl	8009e18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009a2a:	e04e      	b.n	8009aca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f9f3 	bl	8009e18 <USBD_CtlSendStatus>
      break;
 8009a32:	e04a      	b.n	8009aca <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a34:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d112      	bne.n	8009a62 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009a44:	4b22      	ldr	r3, [pc, #136]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a4e:	4b20      	ldr	r3, [pc, #128]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff fa25 	bl	8008ea4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9dc 	bl	8009e18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009a60:	e033      	b.n	8009aca <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009a62:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d01d      	beq.n	8009aac <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fa13 	bl	8008ea4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a7e:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a88:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff f9e9 	bl	8008e66 <USBD_SetClassConfig>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d104      	bne.n	8009aa4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f8f2 	bl	8009c86 <USBD_CtlError>
          return;
 8009aa2:	e012      	b.n	8009aca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f9b7 	bl	8009e18 <USBD_CtlSendStatus>
      break;
 8009aaa:	e00e      	b.n	8009aca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9b3 	bl	8009e18 <USBD_CtlSendStatus>
      break;
 8009ab2:	e00a      	b.n	8009aca <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f8e5 	bl	8009c86 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009abc:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <USBD_SetConfig+0x118>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff f9ee 	bl	8008ea4 <USBD_ClrClassConfig>
      break;
 8009ac8:	bf00      	nop
    }
  }
}
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20000218 	.word	0x20000218

08009ad4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	88db      	ldrh	r3, [r3, #6]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d004      	beq.n	8009af0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f8cc 	bl	8009c86 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009aee:	e021      	b.n	8009b34 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	db17      	blt.n	8009b2a <USBD_GetConfig+0x56>
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	dd02      	ble.n	8009b04 <USBD_GetConfig+0x30>
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d00b      	beq.n	8009b1a <USBD_GetConfig+0x46>
 8009b02:	e012      	b.n	8009b2a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f922 	bl	8009d5c <USBD_CtlSendData>
      break;
 8009b18:	e00c      	b.n	8009b34 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f91a 	bl	8009d5c <USBD_CtlSendData>
      break;
 8009b28:	e004      	b.n	8009b34 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8aa 	bl	8009c86 <USBD_CtlError>
      break;
 8009b32:	bf00      	nop
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d81e      	bhi.n	8009b90 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	88db      	ldrh	r3, [r3, #6]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d004      	beq.n	8009b64 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f892 	bl	8009c86 <USBD_CtlError>
      break;
 8009b62:	e01a      	b.n	8009b9a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f043 0202 	orr.w	r2, r3, #2
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	330c      	adds	r3, #12
 8009b84:	2202      	movs	r2, #2
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f8e7 	bl	8009d5c <USBD_CtlSendData>
    break;
 8009b8e:	e004      	b.n	8009b9a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f877 	bl	8009c86 <USBD_CtlError>
    break;
 8009b98:	bf00      	nop
  }
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	885b      	ldrh	r3, [r3, #2]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d106      	bne.n	8009bc2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f92b 	bl	8009e18 <USBD_CtlSendStatus>
  }

}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d80b      	bhi.n	8009bf8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	885b      	ldrh	r3, [r3, #2]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d10c      	bne.n	8009c02 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f911 	bl	8009e18 <USBD_CtlSendStatus>
    }
    break;
 8009bf6:	e004      	b.n	8009c02 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f843 	bl	8009c86 <USBD_CtlError>
    break;
 8009c00:	e000      	b.n	8009c04 <USBD_ClrFeature+0x3a>
    break;
 8009c02:	bf00      	nop
  }
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781a      	ldrb	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	785a      	ldrb	r2, [r3, #1]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	3302      	adds	r3, #2
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	3303      	adds	r3, #3
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	3304      	adds	r3, #4
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	3305      	adds	r3, #5
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4413      	add	r3, r2
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	3306      	adds	r3, #6
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3307      	adds	r3, #7
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	021b      	lsls	r3, r3, #8
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	4413      	add	r3, r2
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	80da      	strh	r2, [r3, #6]

}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fd00 	bl	800a698 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009c98:	2100      	movs	r1, #0
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fcfc 	bl	800a698 <USBD_LL_StallEP>
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d032      	beq.n	8009d24 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 f834 	bl	8009d2c <USBD_GetLen>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	75fa      	strb	r2, [r7, #23]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	7812      	ldrb	r2, [r2, #0]
 8009ce2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	75fa      	strb	r2, [r7, #23]
 8009cea:	461a      	mov	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4413      	add	r3, r2
 8009cf0:	2203      	movs	r2, #3
 8009cf2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009cf4:	e012      	b.n	8009d1c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	60fa      	str	r2, [r7, #12]
 8009cfc:	7dfa      	ldrb	r2, [r7, #23]
 8009cfe:	1c51      	adds	r1, r2, #1
 8009d00:	75f9      	strb	r1, [r7, #23]
 8009d02:	4611      	mov	r1, r2
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	440a      	add	r2, r1
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	75fa      	strb	r2, [r7, #23]
 8009d12:	461a      	mov	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4413      	add	r3, r2
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e8      	bne.n	8009cf6 <USBD_GetString+0x4e>
    }
  }
}
 8009d24:	bf00      	nop
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009d38:	e005      	b.n	8009d46 <USBD_GetLen+0x1a>
    {
        len++;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3301      	adds	r3, #1
 8009d44:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1f5      	bne.n	8009d3a <USBD_GetLen+0xe>
    }

    return len;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009d72:	88fa      	ldrh	r2, [r7, #6]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d78:	88fa      	ldrh	r2, [r7, #6]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009d7e:	88fb      	ldrh	r3, [r7, #6]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	2100      	movs	r1, #0
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fd10 	bl	800a7aa <USBD_LL_Transmit>

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	2100      	movs	r1, #0
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fcfe 	bl	800a7aa <USBD_LL_Transmit>

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2203      	movs	r2, #3
 8009dca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009dce:	88fa      	ldrh	r2, [r7, #6]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009dd6:	88fa      	ldrh	r2, [r7, #6]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	2100      	movs	r1, #0
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 fd03 	bl	800a7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	2100      	movs	r1, #0
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fcf1 	bl	800a7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2204      	movs	r2, #4
 8009e24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e28:	2300      	movs	r3, #0
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fcbb 	bl	800a7aa <USBD_LL_Transmit>

  return USBD_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2205      	movs	r2, #5
 8009e4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2200      	movs	r2, #0
 8009e52:	2100      	movs	r1, #0
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fccb 	bl	800a7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e72:	2301      	movs	r3, #1
 8009e74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e7c:	7a5b      	ldrb	r3, [r3, #9]
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d131      	bne.n	8009ee8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e84:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e86:	7a5b      	ldrb	r3, [r3, #9]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e8e:	2100      	movs	r1, #0
 8009e90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e92:	4b19      	ldr	r3, [pc, #100]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e94:	7a5b      	ldrb	r3, [r3, #9]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009ea4:	7a5b      	ldrb	r3, [r3, #9]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009eac:	4413      	add	r3, r2
 8009eae:	79fa      	ldrb	r2, [r7, #7]
 8009eb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009eb4:	7a5b      	ldrb	r3, [r3, #9]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	b2d1      	uxtb	r1, r2
 8009ebc:	4a0e      	ldr	r2, [pc, #56]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009ebe:	7251      	strb	r1, [r2, #9]
 8009ec0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ec2:	7dbb      	ldrb	r3, [r7, #22]
 8009ec4:	3330      	adds	r3, #48	; 0x30
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	223a      	movs	r2, #58	; 0x3a
 8009ed2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	3302      	adds	r3, #2
 8009ed8:	222f      	movs	r2, #47	; 0x2f
 8009eda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	3303      	adds	r3, #3
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	2000021c 	.word	0x2000021c

08009efc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f06:	2200      	movs	r2, #0
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff ffaa 	bl	8009e64 <FATFS_LinkDriverEx>
 8009f10:	4603      	mov	r3, r0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f20:	2200      	movs	r2, #0
 8009f22:	4912      	ldr	r1, [pc, #72]	; (8009f6c <MX_USB_DEVICE_Init+0x50>)
 8009f24:	4812      	ldr	r0, [pc, #72]	; (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f26:	f7fe ff42 	bl	8008dae <USBD_Init>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f30:	f7f6 fec6 	bl	8000cc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f34:	490f      	ldr	r1, [pc, #60]	; (8009f74 <MX_USB_DEVICE_Init+0x58>)
 8009f36:	480e      	ldr	r0, [pc, #56]	; (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f38:	f7fe ff64 	bl	8008e04 <USBD_RegisterClass>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f42:	f7f6 febd 	bl	8000cc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f46:	490c      	ldr	r1, [pc, #48]	; (8009f78 <MX_USB_DEVICE_Init+0x5c>)
 8009f48:	4809      	ldr	r0, [pc, #36]	; (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f4a:	f7fe fec1 	bl	8008cd0 <USBD_CDC_RegisterInterface>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f54:	f7f6 feb4 	bl	8000cc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f58:	4805      	ldr	r0, [pc, #20]	; (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f5a:	f7fe ff6d 	bl	8008e38 <USBD_Start>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f64:	f7f6 feac 	bl	8000cc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f68:	bf00      	nop
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000140 	.word	0x20000140
 8009f70:	2000099c 	.word	0x2000099c
 8009f74:	2000002c 	.word	0x2000002c
 8009f78:	20000130 	.word	0x20000130

08009f7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f80:	2200      	movs	r2, #0
 8009f82:	4905      	ldr	r1, [pc, #20]	; (8009f98 <CDC_Init_FS+0x1c>)
 8009f84:	4805      	ldr	r0, [pc, #20]	; (8009f9c <CDC_Init_FS+0x20>)
 8009f86:	f7fe feba 	bl	8008cfe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f8a:	4905      	ldr	r1, [pc, #20]	; (8009fa0 <CDC_Init_FS+0x24>)
 8009f8c:	4803      	ldr	r0, [pc, #12]	; (8009f9c <CDC_Init_FS+0x20>)
 8009f8e:	f7fe fed0 	bl	8008d32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20001438 	.word	0x20001438
 8009f9c:	2000099c 	.word	0x2000099c
 8009fa0:	20000c38 	.word	0x20000c38

08009fa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	71fb      	strb	r3, [r7, #7]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2b23      	cmp	r3, #35	; 0x23
 8009fc8:	d84a      	bhi.n	800a060 <CDC_Control_FS+0xac>
 8009fca:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <CDC_Control_FS+0x1c>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	0800a061 	.word	0x0800a061
 8009fd4:	0800a061 	.word	0x0800a061
 8009fd8:	0800a061 	.word	0x0800a061
 8009fdc:	0800a061 	.word	0x0800a061
 8009fe0:	0800a061 	.word	0x0800a061
 8009fe4:	0800a061 	.word	0x0800a061
 8009fe8:	0800a061 	.word	0x0800a061
 8009fec:	0800a061 	.word	0x0800a061
 8009ff0:	0800a061 	.word	0x0800a061
 8009ff4:	0800a061 	.word	0x0800a061
 8009ff8:	0800a061 	.word	0x0800a061
 8009ffc:	0800a061 	.word	0x0800a061
 800a000:	0800a061 	.word	0x0800a061
 800a004:	0800a061 	.word	0x0800a061
 800a008:	0800a061 	.word	0x0800a061
 800a00c:	0800a061 	.word	0x0800a061
 800a010:	0800a061 	.word	0x0800a061
 800a014:	0800a061 	.word	0x0800a061
 800a018:	0800a061 	.word	0x0800a061
 800a01c:	0800a061 	.word	0x0800a061
 800a020:	0800a061 	.word	0x0800a061
 800a024:	0800a061 	.word	0x0800a061
 800a028:	0800a061 	.word	0x0800a061
 800a02c:	0800a061 	.word	0x0800a061
 800a030:	0800a061 	.word	0x0800a061
 800a034:	0800a061 	.word	0x0800a061
 800a038:	0800a061 	.word	0x0800a061
 800a03c:	0800a061 	.word	0x0800a061
 800a040:	0800a061 	.word	0x0800a061
 800a044:	0800a061 	.word	0x0800a061
 800a048:	0800a061 	.word	0x0800a061
 800a04c:	0800a061 	.word	0x0800a061
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a061 	.word	0x0800a061
 800a058:	0800a061 	.word	0x0800a061
 800a05c:	0800a061 	.word	0x0800a061
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a060:	bf00      	nop
  }

  return (USBD_OK);
 800a062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4805      	ldr	r0, [pc, #20]	; (800a094 <CDC_Receive_FS+0x24>)
 800a07e:	f7fe fe58 	bl	8008d32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a082:	4804      	ldr	r0, [pc, #16]	; (800a094 <CDC_Receive_FS+0x24>)
 800a084:	f7fe fe69 	bl	8008d5a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a088:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	2000099c 	.word	0x2000099c

0800a098 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	6039      	str	r1, [r7, #0]
 800a0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2212      	movs	r2, #18
 800a0a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0aa:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	2000015c 	.word	0x2000015c

0800a0bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0ce:	4b03      	ldr	r3, [pc, #12]	; (800a0dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000170 	.word	0x20000170

0800a0e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d105      	bne.n	800a0fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	4907      	ldr	r1, [pc, #28]	; (800a114 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0f6:	4808      	ldr	r0, [pc, #32]	; (800a118 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0f8:	f7ff fdd6 	bl	8009ca8 <USBD_GetString>
 800a0fc:	e004      	b.n	800a108 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	4904      	ldr	r1, [pc, #16]	; (800a114 <USBD_FS_ProductStrDescriptor+0x34>)
 800a102:	4805      	ldr	r0, [pc, #20]	; (800a118 <USBD_FS_ProductStrDescriptor+0x38>)
 800a104:	f7ff fdd0 	bl	8009ca8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20001c38 	.word	0x20001c38
 800a118:	0800aac4 	.word	0x0800aac4

0800a11c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	4904      	ldr	r1, [pc, #16]	; (800a13c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a12c:	4804      	ldr	r0, [pc, #16]	; (800a140 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a12e:	f7ff fdbb 	bl	8009ca8 <USBD_GetString>
  return USBD_StrDesc;
 800a132:	4b02      	ldr	r3, [pc, #8]	; (800a13c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20001c38 	.word	0x20001c38
 800a140:	0800aadc 	.word	0x0800aadc

0800a144 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	6039      	str	r1, [r7, #0]
 800a14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	221a      	movs	r2, #26
 800a154:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a156:	f000 f843 	bl	800a1e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a15a:	4b02      	ldr	r3, [pc, #8]	; (800a164 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20000174 	.word	0x20000174

0800a168 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4907      	ldr	r1, [pc, #28]	; (800a19c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a17e:	4808      	ldr	r0, [pc, #32]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a180:	f7ff fd92 	bl	8009ca8 <USBD_GetString>
 800a184:	e004      	b.n	800a190 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	4904      	ldr	r1, [pc, #16]	; (800a19c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a18a:	4805      	ldr	r0, [pc, #20]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a18c:	f7ff fd8c 	bl	8009ca8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a190:	4b02      	ldr	r3, [pc, #8]	; (800a19c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a192:	4618      	mov	r0, r3
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20001c38 	.word	0x20001c38
 800a1a0:	0800aaf0 	.word	0x0800aaf0

0800a1a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	4907      	ldr	r1, [pc, #28]	; (800a1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1ba:	4808      	ldr	r0, [pc, #32]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1bc:	f7ff fd74 	bl	8009ca8 <USBD_GetString>
 800a1c0:	e004      	b.n	800a1cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4904      	ldr	r1, [pc, #16]	; (800a1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1c6:	4805      	ldr	r0, [pc, #20]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1c8:	f7ff fd6e 	bl	8009ca8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20001c38 	.word	0x20001c38
 800a1dc:	0800aafc 	.word	0x0800aafc

0800a1e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <Get_SerialNum+0x44>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1ec:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <Get_SerialNum+0x48>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <Get_SerialNum+0x4c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d009      	beq.n	800a21a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a206:	2208      	movs	r2, #8
 800a208:	4909      	ldr	r1, [pc, #36]	; (800a230 <Get_SerialNum+0x50>)
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 f814 	bl	800a238 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a210:	2204      	movs	r2, #4
 800a212:	4908      	ldr	r1, [pc, #32]	; (800a234 <Get_SerialNum+0x54>)
 800a214:	68b8      	ldr	r0, [r7, #8]
 800a216:	f000 f80f 	bl	800a238 <IntToUnicode>
  }
}
 800a21a:	bf00      	nop
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	1fff7a10 	.word	0x1fff7a10
 800a228:	1fff7a14 	.word	0x1fff7a14
 800a22c:	1fff7a18 	.word	0x1fff7a18
 800a230:	20000176 	.word	0x20000176
 800a234:	20000186 	.word	0x20000186

0800a238 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]
 800a24e:	e027      	b.n	800a2a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	0f1b      	lsrs	r3, r3, #28
 800a254:	2b09      	cmp	r3, #9
 800a256:	d80b      	bhi.n	800a270 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	0f1b      	lsrs	r3, r3, #28
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	4619      	mov	r1, r3
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	440b      	add	r3, r1
 800a268:	3230      	adds	r2, #48	; 0x30
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	e00a      	b.n	800a286 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	0f1b      	lsrs	r3, r3, #28
 800a274:	b2da      	uxtb	r2, r3
 800a276:	7dfb      	ldrb	r3, [r7, #23]
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	4619      	mov	r1, r3
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	440b      	add	r3, r1
 800a280:	3237      	adds	r2, #55	; 0x37
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	005b      	lsls	r3, r3, #1
 800a290:	3301      	adds	r3, #1
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	4413      	add	r3, r2
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	3301      	adds	r3, #1
 800a29e:	75fb      	strb	r3, [r7, #23]
 800a2a0:	7dfa      	ldrb	r2, [r7, #23]
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d3d3      	bcc.n	800a250 <IntToUnicode+0x18>
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	371c      	adds	r7, #28
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08a      	sub	sp, #40	; 0x28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2bc:	f107 0314 	add.w	r3, r7, #20
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	609a      	str	r2, [r3, #8]
 800a2c8:	60da      	str	r2, [r3, #12]
 800a2ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2d4:	d13a      	bne.n	800a34c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2de:	4a1d      	ldr	r2, [pc, #116]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a2e0:	f043 0301 	orr.w	r3, r3, #1
 800a2e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e6:	4b1b      	ldr	r3, [pc, #108]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	613b      	str	r3, [r7, #16]
 800a2f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a2f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a2f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a300:	2303      	movs	r3, #3
 800a302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a304:	230a      	movs	r3, #10
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	4619      	mov	r1, r3
 800a30e:	4812      	ldr	r0, [pc, #72]	; (800a358 <HAL_PCD_MspInit+0xa4>)
 800a310:	f7f7 fc6c 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a314:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a318:	4a0e      	ldr	r2, [pc, #56]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31e:	6353      	str	r3, [r2, #52]	; 0x34
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a328:	4a0a      	ldr	r2, [pc, #40]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a32a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a32e:	6453      	str	r3, [r2, #68]	; 0x44
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <HAL_PCD_MspInit+0xa0>)
 800a332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a33c:	2200      	movs	r2, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	2043      	movs	r0, #67	; 0x43
 800a342:	f7f7 fc07 	bl	8001b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a346:	2043      	movs	r0, #67	; 0x43
 800a348:	f7f7 fc20 	bl	8001b8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a34c:	bf00      	nop
 800a34e:	3728      	adds	r7, #40	; 0x28
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	40023800 	.word	0x40023800
 800a358:	40020000 	.word	0x40020000

0800a35c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7fe fda9 	bl	8008eca <USBD_LL_SetupStage>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a392:	78fa      	ldrb	r2, [r7, #3]
 800a394:	6879      	ldr	r1, [r7, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	440b      	add	r3, r1
 800a3a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	78fb      	ldrb	r3, [r7, #3]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	f7fe fdd9 	bl	8008f60 <USBD_LL_DataOutStage>
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	440b      	add	r3, r1
 800a3d6:	3348      	adds	r3, #72	; 0x48
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	f7fe fe30 	bl	8009042 <USBD_LL_DataInStage>
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe ff3e 	bl	800927a <USBD_LL_SOF>
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
 800a41e:	e008      	b.n	800a432 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d102      	bne.n	800a42e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a428:	2301      	movs	r3, #1
 800a42a:	73fb      	strb	r3, [r7, #15]
 800a42c:	e001      	b.n	800a432 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a42e:	f7f6 fc47 	bl	8000cc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a438:	7bfa      	ldrb	r2, [r7, #15]
 800a43a:	4611      	mov	r1, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe fee6 	bl	800920e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fe9f 	bl	800918c <USBD_LL_Reset>
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fee1 	bl	800922e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6812      	ldr	r2, [r2, #0]
 800a47a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a47e:	f043 0301 	orr.w	r3, r3, #1
 800a482:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a48c:	4b04      	ldr	r3, [pc, #16]	; (800a4a0 <HAL_PCD_SuspendCallback+0x48>)
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	4a03      	ldr	r2, [pc, #12]	; (800a4a0 <HAL_PCD_SuspendCallback+0x48>)
 800a492:	f043 0306 	orr.w	r3, r3, #6
 800a496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	e000ed00 	.word	0xe000ed00

0800a4a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fed0 	bl	8009258 <USBD_LL_Resume>
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4d2:	78fa      	ldrb	r2, [r7, #3]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe fef6 	bl	80092c8 <USBD_LL_IsoOUTIncomplete>
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fed7 	bl	80092ae <USBD_LL_IsoINIncomplete>
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fee3 	bl	80092e2 <USBD_LL_DevConnected>
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fee0 	bl	80092f8 <USBD_LL_DevDisconnected>
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d13c      	bne.n	800a5ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a550:	4a20      	ldr	r2, [pc, #128]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a1e      	ldr	r2, [pc, #120]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a55c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a560:	4b1c      	ldr	r3, [pc, #112]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a562:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a566:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a568:	4b1a      	ldr	r3, [pc, #104]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a56a:	2204      	movs	r2, #4
 800a56c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a56e:	4b19      	ldr	r3, [pc, #100]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a570:	2202      	movs	r2, #2
 800a572:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a574:	4b17      	ldr	r3, [pc, #92]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a576:	2200      	movs	r2, #0
 800a578:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a57a:	4b16      	ldr	r3, [pc, #88]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a57c:	2202      	movs	r2, #2
 800a57e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a580:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a582:	2200      	movs	r2, #0
 800a584:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a586:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a588:	2200      	movs	r2, #0
 800a58a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a58c:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a58e:	2200      	movs	r2, #0
 800a590:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a594:	2200      	movs	r2, #0
 800a596:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a598:	4b0e      	ldr	r3, [pc, #56]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a59e:	480d      	ldr	r0, [pc, #52]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a5a0:	f7f7 fe10 	bl	80021c4 <HAL_PCD_Init>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a5aa:	f7f6 fb89 	bl	8000cc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a5ae:	2180      	movs	r1, #128	; 0x80
 800a5b0:	4808      	ldr	r0, [pc, #32]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a5b2:	f7f8 ff74 	bl	800349e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a5b6:	2240      	movs	r2, #64	; 0x40
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	4806      	ldr	r0, [pc, #24]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a5bc:	f7f8 ff28 	bl	8003410 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a5c0:	2280      	movs	r2, #128	; 0x80
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	4803      	ldr	r0, [pc, #12]	; (800a5d4 <USBD_LL_Init+0x94>)
 800a5c6:	f7f8 ff23 	bl	8003410 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20001e38 	.word	0x20001e38

0800a5d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f7 ff05 	bl	80023fe <HAL_PCD_Start>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f92e 	bl	800a85c <USBD_Get_USB_Status>
 800a600:	4603      	mov	r3, r0
 800a602:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a604:	7bbb      	ldrb	r3, [r7, #14]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	461a      	mov	r2, r3
 800a61c:	4603      	mov	r3, r0
 800a61e:	70fb      	strb	r3, [r7, #3]
 800a620:	460b      	mov	r3, r1
 800a622:	70bb      	strb	r3, [r7, #2]
 800a624:	4613      	mov	r3, r2
 800a626:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a636:	78bb      	ldrb	r3, [r7, #2]
 800a638:	883a      	ldrh	r2, [r7, #0]
 800a63a:	78f9      	ldrb	r1, [r7, #3]
 800a63c:	f7f8 fada 	bl	8002bf4 <HAL_PCD_EP_Open>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 f908 	bl	800a85c <USBD_Get_USB_Status>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a650:	7bbb      	ldrb	r3, [r7, #14]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	460b      	mov	r3, r1
 800a664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f8 fb23 	bl	8002cc4 <HAL_PCD_EP_Close>
 800a67e:	4603      	mov	r3, r0
 800a680:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f8e9 	bl	800a85c <USBD_Get_USB_Status>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f8 fbfb 	bl	8002eb2 <HAL_PCD_EP_SetStall>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f8ca 	bl	800a85c <USBD_Get_USB_Status>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f8 fc40 	bl	8002f7a <HAL_PCD_EP_ClrStall>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	4618      	mov	r0, r3
 800a702:	f000 f8ab 	bl	800a85c <USBD_Get_USB_Status>
 800a706:	4603      	mov	r3, r0
 800a708:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a726:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	da0b      	bge.n	800a748 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a736:	68f9      	ldr	r1, [r7, #12]
 800a738:	4613      	mov	r3, r2
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	1a9b      	subs	r3, r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	333e      	adds	r3, #62	; 0x3e
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	e00b      	b.n	800a760 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a74e:	68f9      	ldr	r1, [r7, #12]
 800a750:	4613      	mov	r3, r2
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	440b      	add	r3, r1
 800a75a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a75e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a786:	78fa      	ldrb	r2, [r7, #3]
 800a788:	4611      	mov	r1, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7f8 fa0d 	bl	8002baa <HAL_PCD_SetAddress>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f860 	bl	800a85c <USBD_Get_USB_Status>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	72fb      	strb	r3, [r7, #11]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a7cc:	893b      	ldrh	r3, [r7, #8]
 800a7ce:	7af9      	ldrb	r1, [r7, #11]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	f7f8 fb24 	bl	8002e1e <HAL_PCD_EP_Transmit>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 f83d 	bl	800a85c <USBD_Get_USB_Status>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a7e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	607a      	str	r2, [r7, #4]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	72fb      	strb	r3, [r7, #11]
 800a800:	4613      	mov	r3, r2
 800a802:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a812:	893b      	ldrh	r3, [r7, #8]
 800a814:	7af9      	ldrb	r1, [r7, #11]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	f7f8 fa9e 	bl	8002d58 <HAL_PCD_EP_Receive>
 800a81c:	4603      	mov	r3, r0
 800a81e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f81a 	bl	800a85c <USBD_Get_USB_Status>
 800a828:	4603      	mov	r3, r0
 800a82a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a82c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a848:	78fa      	ldrb	r2, [r7, #3]
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7f8 face 	bl	8002dee <HAL_PCD_EP_GetRxCount>
 800a852:	4603      	mov	r3, r0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	4603      	mov	r3, r0
 800a864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d817      	bhi.n	800a8a0 <USBD_Get_USB_Status+0x44>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <USBD_Get_USB_Status+0x1c>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800a889 	.word	0x0800a889
 800a87c:	0800a88f 	.word	0x0800a88f
 800a880:	0800a895 	.word	0x0800a895
 800a884:	0800a89b 	.word	0x0800a89b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
    break;
 800a88c:	e00b      	b.n	800a8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a88e:	2302      	movs	r3, #2
 800a890:	73fb      	strb	r3, [r7, #15]
    break;
 800a892:	e008      	b.n	800a8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
    break;
 800a898:	e005      	b.n	800a8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a89a:	2302      	movs	r3, #2
 800a89c:	73fb      	strb	r3, [r7, #15]
    break;
 800a89e:	e002      	b.n	800a8a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a4:	bf00      	nop
  }
  return usb_status;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <__errno>:
 800a8b4:	4b01      	ldr	r3, [pc, #4]	; (800a8bc <__errno+0x8>)
 800a8b6:	6818      	ldr	r0, [r3, #0]
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	20000190 	.word	0x20000190

0800a8c0 <__libc_init_array>:
 800a8c0:	b570      	push	{r4, r5, r6, lr}
 800a8c2:	4e0d      	ldr	r6, [pc, #52]	; (800a8f8 <__libc_init_array+0x38>)
 800a8c4:	4c0d      	ldr	r4, [pc, #52]	; (800a8fc <__libc_init_array+0x3c>)
 800a8c6:	1ba4      	subs	r4, r4, r6
 800a8c8:	10a4      	asrs	r4, r4, #2
 800a8ca:	2500      	movs	r5, #0
 800a8cc:	42a5      	cmp	r5, r4
 800a8ce:	d109      	bne.n	800a8e4 <__libc_init_array+0x24>
 800a8d0:	4e0b      	ldr	r6, [pc, #44]	; (800a900 <__libc_init_array+0x40>)
 800a8d2:	4c0c      	ldr	r4, [pc, #48]	; (800a904 <__libc_init_array+0x44>)
 800a8d4:	f000 f8ea 	bl	800aaac <_init>
 800a8d8:	1ba4      	subs	r4, r4, r6
 800a8da:	10a4      	asrs	r4, r4, #2
 800a8dc:	2500      	movs	r5, #0
 800a8de:	42a5      	cmp	r5, r4
 800a8e0:	d105      	bne.n	800a8ee <__libc_init_array+0x2e>
 800a8e2:	bd70      	pop	{r4, r5, r6, pc}
 800a8e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8e8:	4798      	blx	r3
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	e7ee      	b.n	800a8cc <__libc_init_array+0xc>
 800a8ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8f2:	4798      	blx	r3
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	e7f2      	b.n	800a8de <__libc_init_array+0x1e>
 800a8f8:	0800ab2c 	.word	0x0800ab2c
 800a8fc:	0800ab2c 	.word	0x0800ab2c
 800a900:	0800ab2c 	.word	0x0800ab2c
 800a904:	0800ab30 	.word	0x0800ab30

0800a908 <malloc>:
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <malloc+0xc>)
 800a90a:	4601      	mov	r1, r0
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	f000 b861 	b.w	800a9d4 <_malloc_r>
 800a912:	bf00      	nop
 800a914:	20000190 	.word	0x20000190

0800a918 <free>:
 800a918:	4b02      	ldr	r3, [pc, #8]	; (800a924 <free+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	f000 b80b 	b.w	800a938 <_free_r>
 800a922:	bf00      	nop
 800a924:	20000190 	.word	0x20000190

0800a928 <memset>:
 800a928:	4402      	add	r2, r0
 800a92a:	4603      	mov	r3, r0
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d100      	bne.n	800a932 <memset+0xa>
 800a930:	4770      	bx	lr
 800a932:	f803 1b01 	strb.w	r1, [r3], #1
 800a936:	e7f9      	b.n	800a92c <memset+0x4>

0800a938 <_free_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4605      	mov	r5, r0
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d045      	beq.n	800a9cc <_free_r+0x94>
 800a940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a944:	1f0c      	subs	r4, r1, #4
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfb8      	it	lt
 800a94a:	18e4      	addlt	r4, r4, r3
 800a94c:	f000 f8ac 	bl	800aaa8 <__malloc_lock>
 800a950:	4a1f      	ldr	r2, [pc, #124]	; (800a9d0 <_free_r+0x98>)
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	4610      	mov	r0, r2
 800a956:	b933      	cbnz	r3, 800a966 <_free_r+0x2e>
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	6014      	str	r4, [r2, #0]
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a962:	f000 b8a2 	b.w	800aaaa <__malloc_unlock>
 800a966:	42a3      	cmp	r3, r4
 800a968:	d90c      	bls.n	800a984 <_free_r+0x4c>
 800a96a:	6821      	ldr	r1, [r4, #0]
 800a96c:	1862      	adds	r2, r4, r1
 800a96e:	4293      	cmp	r3, r2
 800a970:	bf04      	itt	eq
 800a972:	681a      	ldreq	r2, [r3, #0]
 800a974:	685b      	ldreq	r3, [r3, #4]
 800a976:	6063      	str	r3, [r4, #4]
 800a978:	bf04      	itt	eq
 800a97a:	1852      	addeq	r2, r2, r1
 800a97c:	6022      	streq	r2, [r4, #0]
 800a97e:	6004      	str	r4, [r0, #0]
 800a980:	e7ec      	b.n	800a95c <_free_r+0x24>
 800a982:	4613      	mov	r3, r2
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	b10a      	cbz	r2, 800a98c <_free_r+0x54>
 800a988:	42a2      	cmp	r2, r4
 800a98a:	d9fa      	bls.n	800a982 <_free_r+0x4a>
 800a98c:	6819      	ldr	r1, [r3, #0]
 800a98e:	1858      	adds	r0, r3, r1
 800a990:	42a0      	cmp	r0, r4
 800a992:	d10b      	bne.n	800a9ac <_free_r+0x74>
 800a994:	6820      	ldr	r0, [r4, #0]
 800a996:	4401      	add	r1, r0
 800a998:	1858      	adds	r0, r3, r1
 800a99a:	4282      	cmp	r2, r0
 800a99c:	6019      	str	r1, [r3, #0]
 800a99e:	d1dd      	bne.n	800a95c <_free_r+0x24>
 800a9a0:	6810      	ldr	r0, [r2, #0]
 800a9a2:	6852      	ldr	r2, [r2, #4]
 800a9a4:	605a      	str	r2, [r3, #4]
 800a9a6:	4401      	add	r1, r0
 800a9a8:	6019      	str	r1, [r3, #0]
 800a9aa:	e7d7      	b.n	800a95c <_free_r+0x24>
 800a9ac:	d902      	bls.n	800a9b4 <_free_r+0x7c>
 800a9ae:	230c      	movs	r3, #12
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	e7d3      	b.n	800a95c <_free_r+0x24>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	1821      	adds	r1, r4, r0
 800a9b8:	428a      	cmp	r2, r1
 800a9ba:	bf04      	itt	eq
 800a9bc:	6811      	ldreq	r1, [r2, #0]
 800a9be:	6852      	ldreq	r2, [r2, #4]
 800a9c0:	6062      	str	r2, [r4, #4]
 800a9c2:	bf04      	itt	eq
 800a9c4:	1809      	addeq	r1, r1, r0
 800a9c6:	6021      	streq	r1, [r4, #0]
 800a9c8:	605c      	str	r4, [r3, #4]
 800a9ca:	e7c7      	b.n	800a95c <_free_r+0x24>
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000228 	.word	0x20000228

0800a9d4 <_malloc_r>:
 800a9d4:	b570      	push	{r4, r5, r6, lr}
 800a9d6:	1ccd      	adds	r5, r1, #3
 800a9d8:	f025 0503 	bic.w	r5, r5, #3
 800a9dc:	3508      	adds	r5, #8
 800a9de:	2d0c      	cmp	r5, #12
 800a9e0:	bf38      	it	cc
 800a9e2:	250c      	movcc	r5, #12
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	db01      	blt.n	800a9ee <_malloc_r+0x1a>
 800a9ea:	42a9      	cmp	r1, r5
 800a9ec:	d903      	bls.n	800a9f6 <_malloc_r+0x22>
 800a9ee:	230c      	movs	r3, #12
 800a9f0:	6033      	str	r3, [r6, #0]
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
 800a9f6:	f000 f857 	bl	800aaa8 <__malloc_lock>
 800a9fa:	4a21      	ldr	r2, [pc, #132]	; (800aa80 <_malloc_r+0xac>)
 800a9fc:	6814      	ldr	r4, [r2, #0]
 800a9fe:	4621      	mov	r1, r4
 800aa00:	b991      	cbnz	r1, 800aa28 <_malloc_r+0x54>
 800aa02:	4c20      	ldr	r4, [pc, #128]	; (800aa84 <_malloc_r+0xb0>)
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	b91b      	cbnz	r3, 800aa10 <_malloc_r+0x3c>
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f000 f83d 	bl	800aa88 <_sbrk_r>
 800aa0e:	6020      	str	r0, [r4, #0]
 800aa10:	4629      	mov	r1, r5
 800aa12:	4630      	mov	r0, r6
 800aa14:	f000 f838 	bl	800aa88 <_sbrk_r>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d124      	bne.n	800aa66 <_malloc_r+0x92>
 800aa1c:	230c      	movs	r3, #12
 800aa1e:	6033      	str	r3, [r6, #0]
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 f842 	bl	800aaaa <__malloc_unlock>
 800aa26:	e7e4      	b.n	800a9f2 <_malloc_r+0x1e>
 800aa28:	680b      	ldr	r3, [r1, #0]
 800aa2a:	1b5b      	subs	r3, r3, r5
 800aa2c:	d418      	bmi.n	800aa60 <_malloc_r+0x8c>
 800aa2e:	2b0b      	cmp	r3, #11
 800aa30:	d90f      	bls.n	800aa52 <_malloc_r+0x7e>
 800aa32:	600b      	str	r3, [r1, #0]
 800aa34:	50cd      	str	r5, [r1, r3]
 800aa36:	18cc      	adds	r4, r1, r3
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f836 	bl	800aaaa <__malloc_unlock>
 800aa3e:	f104 000b 	add.w	r0, r4, #11
 800aa42:	1d23      	adds	r3, r4, #4
 800aa44:	f020 0007 	bic.w	r0, r0, #7
 800aa48:	1ac3      	subs	r3, r0, r3
 800aa4a:	d0d3      	beq.n	800a9f4 <_malloc_r+0x20>
 800aa4c:	425a      	negs	r2, r3
 800aa4e:	50e2      	str	r2, [r4, r3]
 800aa50:	e7d0      	b.n	800a9f4 <_malloc_r+0x20>
 800aa52:	428c      	cmp	r4, r1
 800aa54:	684b      	ldr	r3, [r1, #4]
 800aa56:	bf16      	itet	ne
 800aa58:	6063      	strne	r3, [r4, #4]
 800aa5a:	6013      	streq	r3, [r2, #0]
 800aa5c:	460c      	movne	r4, r1
 800aa5e:	e7eb      	b.n	800aa38 <_malloc_r+0x64>
 800aa60:	460c      	mov	r4, r1
 800aa62:	6849      	ldr	r1, [r1, #4]
 800aa64:	e7cc      	b.n	800aa00 <_malloc_r+0x2c>
 800aa66:	1cc4      	adds	r4, r0, #3
 800aa68:	f024 0403 	bic.w	r4, r4, #3
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d005      	beq.n	800aa7c <_malloc_r+0xa8>
 800aa70:	1a21      	subs	r1, r4, r0
 800aa72:	4630      	mov	r0, r6
 800aa74:	f000 f808 	bl	800aa88 <_sbrk_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d0cf      	beq.n	800aa1c <_malloc_r+0x48>
 800aa7c:	6025      	str	r5, [r4, #0]
 800aa7e:	e7db      	b.n	800aa38 <_malloc_r+0x64>
 800aa80:	20000228 	.word	0x20000228
 800aa84:	2000022c 	.word	0x2000022c

0800aa88 <_sbrk_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4c06      	ldr	r4, [pc, #24]	; (800aaa4 <_sbrk_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4605      	mov	r5, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	6023      	str	r3, [r4, #0]
 800aa94:	f7f6 fc74 	bl	8001380 <_sbrk>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_sbrk_r+0x1a>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_sbrk_r+0x1a>
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20002240 	.word	0x20002240

0800aaa8 <__malloc_lock>:
 800aaa8:	4770      	bx	lr

0800aaaa <__malloc_unlock>:
 800aaaa:	4770      	bx	lr

0800aaac <_init>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr

0800aab8 <_fini>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr
